#lang racket
(require "pr_primitives.rkt")
(provide compiled-forms)

; only for check
;(define-namespace-anchor anchor1)
;(define ns (namespace-anchor->namespace anchor1))
;(define (l_eval x) (eval x ns))

(define max-iter 10)

(define compiled-forms (make-hash))

(define (symbolic-s-compose foot c iter)
  (define result foot)
  (for ([i (in-range iter)]) (set! result (list c 'S result)))
  result)

;(symbolic-s-compose 'P21 'C12 5)

(define (symbolic-s-only-compose iter)
  (if (equal? iter 0)
      'P11
      (symbolic-s-compose 'S 'C11 (- iter 1))))

(define (register-solution-default case make-fun)
  (for* ([i (in-range max-iter)]
         [k (in-range max-iter)])
    (hash-set! compiled-forms (case i k) (make-fun i k))))

;these next two are cheap hacks; for proper versions of evaluation adopt the code from pr04
(define (get-arity s)
  (case (first s)
    [(R0) 1]
    [(R1) 2]))

(define (test-eval s f)
  (case (get-arity s)
    [(1) (for*/list ([i (in-range 25)]) (f i))]
    [(2) (for*/list ([i (in-range 5)] [j (in-range 5)]) (f i j))]))

;(define (register-solution-check case make-fun)
;  (for* ([i (in-range max-iter)]
;         [k (in-range max-iter)])
;    (let* ([case1 (case i k)]
;           [make1 (make-fun i k)]
;           [casef (l_eval case1)]
;           [res1 (test-eval case1 casef)]
;           [res2 (test-eval case1 make1)])
;      (if (not (equal? res1 res2))
;        (printf "Error on ~a:\n\t~a\n\t~a\n\n" case1 res1 res2)
;        void; (printf "Check on ~a:\n\t~a\n\t~a\n\n" case1 res1 res2)
;        )))
;  (register-solution-default case make-fun))


(define register-solution register-solution-default) ; no checking
;(define register-solution register-solution-check) ; checking

(define (case-R0-1 i k)
  (list 'R0  (symbolic-s-compose 'P21 'C12 i) (symbolic-s-compose 0 'C10 k)))
(define (make-fun-R0-1 i k)
  (lambda (a) (if (equal? a 0) k (+ a (- i 1)))))
(register-solution case-R0-1 make-fun-R0-1)

(define (case-R0-2 i k)
  (list 'R0  (symbolic-s-compose 'P22 'C12 i) (symbolic-s-compose 0 'C10 k)))
(define (make-fun-R0-2 i k)
  (lambda (a) (+ (* a i) k)))
(register-solution case-R0-2 make-fun-R0-2)

(define (case-R1-1 i k)
  (list 'R1  (symbolic-s-compose 'P31 'C13 i) (symbolic-s-only-compose k)))
(define (make-fun-R1-1 i k)
  (lambda (a b) (if (equal? a 0) (+ b k) (+ a (- i 1)))))
(register-solution case-R1-1 make-fun-R1-1)

(define (case-R1-2 i k)
  (list 'R1  (symbolic-s-compose 'P32 'C13 i) (symbolic-s-only-compose k)))
(define (make-fun-R1-2 i k)
  (lambda (a b) (+ (* a i) (+ b k))))
(register-solution case-R1-2 make-fun-R1-2)

(define (case-R1-3 i k)
  (list 'R1  (symbolic-s-compose 'P33 'C13 i) (symbolic-s-only-compose k)))
(define (make-fun-R1-3 i k)
  (lambda (a b) (if (equal? a 0) (+ b k) (+ i b))))
(register-solution case-R1-3 make-fun-R1-3)


; Can I accelerate these?

;(reverse (dump-slow))
;'((#(0 1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) 0)) ; http://oeis.org/A006894
;  (#(0 1 3 10 66 2278 2598060 3374961778891 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) 0))
;  (#(0 0 1 3 9 49 1230 757071 286578628063 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) 0))
;  (#(0 0 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) 0))
;  (#(0 1 3 55 812055963621 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) 0))
;  (#(3 21 1540 26357430 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S S))
;  (#(1 6 231 1186570 347357071281165 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S P11))
;  (#(2 6 55 7260 359026206 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 S))
;  (#(1 3 21 1540 26357430 64449908476890321 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 P11))
;  (#(1 6 231 1186570 347357071281165 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) P11) S S))
;  (#(0 1 21 26796 703974775735 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) P11) S P11))
;  (#(1 3 21 1540 26357430 64449908476890321 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) P11) P11 S))
;  (#(0 1 6 231 1186570 347357071281165 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) P11) P11 P11))
;  (#(0 1 2 5 18 87 518 3621 28962 260651 2606502 28671513 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (R0 (R1 (C23 (R1 (C13 S P32) (R0 P21 0)) P32 P33) S) 0))
;  (#(0 1 2 5 18 87 518 3621 28962 260651 2606502 28671513 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (R0 (R1 (C23 (R1 (C13 S P32) (R0 P21 0)) P33 P32) S) 0))
;  (#(1 2 3 5 12 68 2280 2598062 3374961778893 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 S (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) 0)))
;  (#(1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 S (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) 0)))
;  (#(1 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 S (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) 0)))
;  (#(1 1 2 3 5 11 51 1232 757073 286578628065 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 S (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) 0)))
;  (#(1 2 4 56 812055963622 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 S (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) 0)))
;  (#(0 1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 P11 (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) 0)))
;  (#(0 1 3 10 66 2278 2598060 3374961778891 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 P11 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) 0)))
;  (#(0 0 1 3 9 49 1230 757071 286578628063 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 P11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) 0)))
;  (#(0 0 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 P11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) 0)))
;  (#(0 1 3 55 812055963621 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 P11 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) 0)))
;  (#(1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) 0) S))
;  (#(0 1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) 0) P11))
;  (#(1 3 10 66 2278 2598060 3374961778891 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) 0) S))
;  (#(0 1 3 10 66 2278 2598060 3374961778891 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) 0) P11))
;  (#(0 1 3 9 49 1230 757071 286578628063 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) 0) S))
;  (#(0 0 1 3 9 49 1230 757071 286578628063 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) 0) P11))
;  (#(0 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) 0) S))
;  (#(0 0 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) 0) P11))
;  (#(1 3 55 812055963621 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) 0) S))
;  (#(0 1 3 55 812055963621 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (C11 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) 0) P11))
;  (#(2 3 6 21 231 26796 359026206 64449908476890321 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) P22) (C10 S (C10 S 0))))
;  (#(1 2 4 11 67 2279 2598061 3374961778892 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22)) (C10 S 0)))
;  (#(1 3 10 66 2278 2598060 3374961778891 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (C12 S P22)) (C10 S 0)))
;  (#(1 3 6 21 231 26796 359026206 64449908476890321 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 (R0 (R1 (C13 S P32) S) 0) (R1 P33 S)) (C10 S 0)))
;  (#(1 2 5 20 230 26795 359026205 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 (R0 (C12 S (R1 (C13 S P32) S)) 0) P22) (C10 S 0)))
;  (#(1 1 2 5 18 175 15405 118664721 7040658064336288 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) S) 0)) (C10 S 0)))
;  (#(1 0 1 2 4 10 50 1231 757072 286578628064 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (R1 (C13 S P32) (R0 (R1 (C13 S P32) P11) 0)) (C10 S 0)))
;  (#(1 2 6 406 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) (C10 S 0)))
;  (#(1 2 3 6 21 231 26796 359026206 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P33) S) (C10 S 0)))
;  (#(0 2 5 17 155 12092 73114280 2672849006516342 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R0 (C12 S (C12 S (C12 (R0 (R1 (C13 S P32) S) 0) P22))) 0)))