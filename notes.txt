Results for standard-argument-order primitive recursion here
============================================================

An ordering of the non-negative integers by the number of symbols in the shortest primitive recursive expression that constructs them (see pr_primitives.rkt for the definitions of the primitives) is below. 

(0)   <
(1)    <
(2)     <
(3) 	 <
(4) 	  <
(5) 	   <
(6) 	    <
(7) 	     <
(8 9 10)      <
(11 12 15)     <
(13 21)         <
(14 16 17 18 19 22 23 24 27 31 32 39)	 <
(20 28 29 54 55 66 81 231 1540)          <
(25 26 30 33 34 35 36 37 38 40 43 45 46 47 48 52 53 60 63 64 67 79 80 94 95 108 121) <
(41 42 49 56 57 65 68 76 78 82 83 100 101 102 119 120 135 136 153 156 168 183 210 223 230 232 255 256 289 383 435 436 512 1539 1541 2048 2278 2279 6143 6561 7259 7260 9453 12288 24575 26796 53248 65536 98303 131071 131072 557055 1186570 25165823 26357430 50331648 402653184 8589934591 68719476735 141733920768 22539988369407) 

The five largest numbers took more than 5 seconds to compute naively, so their results show as -1 in the listings that follow, but their evaluation was fast enough after a simple trick (see mystery later).

The above numbers are all lesser by this ordering, i.e. simpler, than the left out numbers: 44,50,51,58,59,61..62,69..75,77,84..93,96..99,103..107,109..118,122..134,137..152,154,155,157..167,169..209,211..222,224..229,233..254,257..288,290..382,384..434,437..511,513..1538,1542..2047,2049..2277,2280..6142,6144..6560,6562..7258,7261..9452,9454..12287,12289..24574,24576..26795,26797..53247,53249..65535, etc... (modulo the completion of the 22nd stage).

The following summarize facts about the shortest constructions of these non-negative integers. The format is (#(<<the result of evaluation>>) <<the number of symbols>> <<the expression in scheme syntax>> <<the enumeration index of this expression in the search>> <<the computation time in milliseconds to obtain the result>>).

For arity 0 functions, i.e. the non-negative integers that we're concerned with at the moment, the result of evaluation is just the number itself (or -1 to represent timeout).
For arity 1 functions, I'll show the evaluation of the function on the inputs 0..24.
For arity 2 functions, I'll evaluate it only on the 25 pairs of (i,j) from 0..4 cross 0..4.

  (#(0) 1 0 1 0)
  (#(1) 3 (C10 S 0) 4 0)
  (#(2) 5 (C10 S (C10 S 0)) 10 0)
  (#(3) 7 (C10 S (C10 S (C10 S 0))) 54 0)
  (#(4) 9 (C10 S (C10 S (C10 S (C10 S 0)))) 287 0)
  (#(5) 11 (C10 S (C10 S (C10 S (C10 S (C10 S 0))))) 1462 0)
  (#(6) 13 (C10 S (C10 S (C10 S (C10 S (C10 S (C10 S 0)))))) 7201 0)
  (#(7) 14 (C10 (C21 (R1 (C13 S P32) S) S S) (C10 S (C10 S 0))) 15775 0)
  (#(8)
   16
   (C10 S (C10 (C21 (R1 (C13 S P32) S) S S) (C10 S (C10 S 0))))
   77958
   0)
  (#(9)
   16
   (C10 (C21 (R1 (C13 S P32) S) S S) (C10 S (C10 S (C10 S 0))))
   77970
   0)
  (#(10)
   16
   (C10 (C21 (R1 (C13 S (C13 S P32)) S) S S) (C10 S (C10 S 0)))
   78013
   0)
  (#(15)
   17
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S S) (C10 S 0))
   184187
   0)
  (#(11)
   17
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S P11) (C10 S 0))
   184188
   0)
  (#(12)
   17
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S S) (C10 S 0))
   184198
   0)
  (#(13)
   18
   (C10 (C21 (R1 (C13 S (C13 S P32)) S) S S) (C10 S (C10 S (C10 S 0))))
   384919
   0)
  (#(21)
   18
   (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S S) (C10 S 0))
   385787
   0)
  (#(16)
   19
   (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S S) (C10 S 0)))
   888061
   0)
  (#(14)
   19
   (C10 (R0 (C12 S (R1 (C13 S P32) S)) 0) (C10 S (C10 S (C10 S (C10 S 0)))))
   888115
   0)
  (#(39)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S S) (C10 S (C10 S 0)))
   888385
   0)
  (#(31)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S P11) (C10 S (C10 S 0)))
   888386
   0)
  (#(19)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P11 S) (C10 S (C10 S 0)))
   888387
   0)
  (#(23)
   19
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) S P11)
    (C10 S (C10 S 0)))
   888390
   0)
  (#(32)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S S) (C10 S (C10 S 0)))
   888396
   0)
  (#(24)
   19
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S P11)
    (C10 S (C10 S 0)))
   888397
   0)
  (#(18)
   19
   (C10 (C21 (R1 (C13 S (C23 (R1 (C13 S P32) S) P32 P32)) S) S S) (C10 S 0))
   889403
   0)
  (#(17)
   19
   (C10 (C21 (R1 (C13 (C21 (R1 (C13 S P32) S) S S) P32) S) S P11) (C10 S 0))
   889434
   0)
  (#(22)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P32) S) S P11) (C10 S 0))
   889472
   0)
  (#(27)
   19
   (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) P11) P32 P32) S) S S) (C10 S 0))
   889503
   0)
  (#(20)
   20
   (C10
    (R0 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) 0)
    (C10 S (C10 S (C10 S 0))))
   1951901
   0)
  (#(1540)
   20
   (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S S) (C10 S (C10 S 0)))
   1952456
   0)
  (#(231)
   20
   (C10
    (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S P11)
    (C10 S (C10 S 0)))
   1952457
   0)
  (#(55)
   20
   (C10
    (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 S)
    (C10 S (C10 S 0)))
   1952458
   0)
  (#(29)
   20
   (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S P32) S) 0) P32)) S) S S) (C10 S 0))
   1955339
   0)
  (#(66)
   20
   (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) S) S S) (C10 S 0))
   1955347
   0)
  (#(28)
   20
   (C10
    (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) S) S P11)
    (C10 S 0))
   1955348
   0)
  (#(54)
   20
   (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) P32) S) S S) (C10 S 0))
   1955369
   0)
  (#(81)
   20
   (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) (C10 S 0))
   1955385
   0))
  (#(40)
   21
   (C10
    S
    (C10 (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S S) (C10 S (C10 S 0))))
   4301927
   0)
  (#(33)
   21
   (C10
    S
    (C10
     (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S S)
     (C10 S (C10 S 0))))
   4301931
   0)
  (#(25)
   21
   (C10
    S
    (C10
     (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S P11)
     (C10 S (C10 S 0))))
   4301932
   0)
  (#(95)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S S)
    (C10 S (C10 S (C10 S 0))))
   4302271
   0)
  (#(79)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) S P11)
    (C10 S (C10 S (C10 S 0))))
   4302272
   0)
  (#(47)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P11 S)
    (C10 S (C10 S (C10 S 0))))
   4302273
   0)
  (#(63)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) S P11)
    (C10 S (C10 S (C10 S 0))))
   4302276
   0)
  (#(80)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S S)
    (C10 S (C10 S (C10 S 0))))
   4302282
   0)
  (#(64)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) S P11)
    (C10 S (C10 S (C10 S 0))))
   4302283
   0)
  (#(48)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) P11) S P11)
    (C10 S (C10 S (C10 S 0))))
   4302287
   0)
  (#(46)
   21
   (C10
    (C21 (R1 (C13 S (C23 (R1 (C13 S P32) S) P32 P32)) S) S S)
    (C10 S (C10 S 0)))
   4303289
   0)
  (#(38)
   21
   (C10
    (C21 (R1 (C13 S (C23 (R1 (C13 S P32) S) P32 P32)) S) S P11)
    (C10 S (C10 S 0)))
   4303290
   0)
  (#(30)
   21
   (C10
    (C21 (R1 (C13 S (C23 (R1 (C13 S P32) S) P32 P32)) P11) S P11)
    (C10 S (C10 S 0)))
   4303294
   0)
  (#(53)
   21
   (C10
    (C21 (R1 (C13 (C21 (R1 (C13 S P32) S) S S) P32) S) S S)
    (C10 S (C10 S 0)))
   4303319
   0)
  (#(45)
   21
   (C10
    (C21 (R1 (C13 (C21 (R1 (C13 S P32) S) S S) P32) S) S P11)
    (C10 S (C10 S 0)))
   4303320
   0)
  (#(37)
   21
   (C10
    (C21 (R1 (C13 (C21 (R1 (C13 S P32) S) S S) P32) P11) S P11)
    (C10 S (C10 S 0)))
   4303324
   0)
  (#(43)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P31) S) S S)
    (C10 S (C10 S 0)))
   4303349
   0)
  (#(35)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P31) S) S P11)
    (C10 S (C10 S 0)))
   4303350
   0)
  (#(121)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P32) S) S S)
    (C10 S (C10 S 0)))
   4303357
   0)
  (#(94)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P32) S) S P11)
    (C10 S (C10 S 0)))
   4303358
   0)
  (#(67)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P32) P11) S P11)
    (C10 S (C10 S 0)))
   4303362
   0)
  (#(60)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P33) S) S S)
    (C10 S (C10 S 0)))
   4303365
   0)
  (#(52)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P33) P11) S S)
    (C10 S (C10 S 0)))
   4303369
   0)
  (#(36)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) P11) P32 P31) S) S S)
    (C10 S (C10 S 0)))
   4303381
   0)
  (#(108)
   21
   (C10
    (C21 (R1 (C23 (R1 (C13 S (C13 S P32)) P11) P32 P32) S) S S)
    (C10 S (C10 S 0)))
   4303389
   0)
  (#(26)
   21
   (C10
    (C21 (R1 (C13 S (C23 (R1 (C13 S (C13 S P32)) S) P32 P32)) S) S P11)
    (C10 S 0))
   4310520
   0)
  (#(34)
   21
   (C10
    (C21 (R1 (C13 (C21 (R1 (C13 S (C13 S P32)) S) S S) P32) S) S P11)
    (C10 S 0))
   4310570
   0))

(on-new (#(1541) 22 (C10 S (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S S) (C10 S (C10 S 0)))) 9778839 0))
(on-new (#(232) 22 (C10 S (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S P11) (C10 S (C10 S 0)))) 9778840 0))
(on-new (#(56) 22 (C10 S (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 S) (C10 S (C10 S 0)))) 9778841 0))
(on-new (#(82) 22 (C10 S (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) (C10 S 0))) 9778846 0))
(on-new (#(168) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 9779263 0))
(on-new (#(41) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P32) P11) P32 P33) S) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 9779264 0))
(on-new (#(26357430) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S S) (C10 S (C10 S (C10 S 0)))) 9779818 845))
(on-new (#(1186570) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) S P11) (C10 S (C10 S (C10 S 0)))) 9779819 38))
(on-new (#(7260) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 S) (C10 S (C10 S (C10 S 0)))) 9779820 1))
(on-new (#(26796) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) P11) S P11) (C10 S (C10 S (C10 S 0)))) 9779823 1))
(on-new (#(76) 22 (C10 (R0 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P32) S) 0) (C10 S (C10 S (C10 S 0)))) 9780240 0))
(on-new (#(49) 22 (C10 (R0 (R1 (C23 (R1 (C13 S (C13 S P32)) S) P32 P33) S) 0) (C10 S (C10 S (C10 S 0)))) 9780242 0))
(on-new (#(120) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) P32) S) P11 (C11 S S)) (C10 S (C10 S 0))) 9782599 0))
(on-new (#(2279) 22 (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S P32) S) 0) P32)) S) S S) (C10 S (C10 S 0))) 9782701 0))
(on-new (#(436) 22 (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S P32) S) 0) P32)) S) S P11) (C10 S (C10 S 0))) 9782702 0))
(on-new (#(9453) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) S) S S) (C10 S (C10 S 0))) 9782709 0))
(on-new (#(2278) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) S) S P11) (C10 S (C10 S 0))) 9782710 0))
(on-new (#(136) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) S) P11 S) (C10 S (C10 S 0))) 9782711 0))
(on-new (#(435) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S P32)) P11) S P11) (C10 S (C10 S 0))) 9782714 0))
(on-new (#(7259) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) P32) S) S S) (C10 S (C10 S 0))) 9782731 0))
(on-new (#(1539) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) P32) S) S P11) (C10 S (C10 S 0))) 9782732 0))
(on-new (#(119) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) P32) S) P11 S) (C10 S (C10 S 0))) 9782733 0))
(on-new (#(230) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) P32) P11) S P11) (C10 S (C10 S 0))) 9782736 0))
(on-new (#(65536) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) (C10 S (C10 S 0))) 9782747 2))
(on-new (#(6561) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S P11) (C10 S (C10 S 0))) 9782748 0))
(on-new (#(256) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) P11 S) (C10 S (C10 S 0))) 9782749 0))
(on-new (#(101) 22 (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32)) S) S S) (C10 S 0)) 9802746 0))
(on-new (#(153) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S (C13 S P32))) S) S S) (C10 S 0)) 9802800 0))
(on-new (#(78) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P32) S) 0) (C13 S (C13 S P32))) S) S P11) (C10 S 0)) 9802801 0))
(on-new (#(135) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) (C13 S P32)) S) S S) (C10 S 0)) 9802808 0))
(on-new (#(65) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P32) S)) 0) (C13 S P32)) S) S P11) (C10 S 0)) 9802809 0))
(on-new (#(289) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) (C13 S P32)) S) S S) (C10 S 0)) 9802817 0))
(on-new (#(100) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) (C13 S P32)) S) S P11) (C10 S 0)) 9802818 0))
(on-new (#(156) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) P11) 0) (C13 S P32)) S) S S) (C10 S 0)) 9802825 0))
(on-new (#(42) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) P11) 0) (C13 S P32)) S) S P11) (C10 S 0)) 9802826 0))
(on-new (#(102) 22 (C10 (C21 (R1 (C13 (R0 (C12 S (C12 S (R1 (C13 S P32) S))) 0) P32) S) S S) (C10 S 0)) 9802859 1))
(on-new (#(210) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S (C13 S P32))) S) 0) P32) S) S S) (C10 S 0)) 9802874 0))
(on-new (#(98303) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P31) S) S S) (C10 S 0)) 9803310 3))
(on-new (#(383) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P31) S) S P11) (C10 S 0)) 9803311 0))
(evaluation-timeout)
(on-new (#(-1) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) S) S S) (C10 S 0)) 9803318 -1))
(on-new (#(557055) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) S) S P11) (C10 S 0)) 9803319 18))
(on-new (#(223) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) P11) S P11) (C10 S 0)) 9803323 0))
(evaluation-timeout)
(on-new (#(-1) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P33) S) S S) (C10 S 0)) 9803326 -1))
(on-new (#(6143) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P33) S) S P11) (C10 S 0)) 9803327 0))
(on-new (#(131071) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P33) P11) S S) (C10 S 0)) 9803330 5))
(on-new (#(83) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P33 P32) S) S S) (C10 S 0)) 9803342 0))
(on-new (#(255) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) P32 P31) S) S S) (C10 S 0)) 9803382 0))
(evaluation-timeout)
(on-new (#(-1) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) P32 P32) S) S S) (C10 S 0)) 9803390 -1))
(on-new (#(24575) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) P32 P32) S) S P11) (C10 S 0)) 9803391 1))
(on-new (#(25165823) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) P32 P33) S) S S) (C10 S 0)) 9803398 821))
(on-new (#(512) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P31) S) S S) (C10 S 0)) 9803528 0))
(evaluation-timeout)
(on-new (#(-1) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P32) S) S S) (C10 S 0)) 9803536 -1))
(on-new (#(53248) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P32) S) S P11) (C10 S 0)) 9803537 2))
(on-new (#(50331648) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P33) S) S S) (C10 S 0)) 9803544 1699))
(on-new (#(12288) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P33) P11) S S) (C10 S 0)) 9803548 0))
(on-new (#(68) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P33 P32) S) S S) (C10 S 0)) 9803560 0))
(evaluation-timeout)
(on-new (#(-1) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) P11) P32 P32) S) S S) (C10 S 0)) 9803608 -1))
(on-new (#(2048) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) P11) P32 P32) S) S P11) (C10 S 0)) 9803609 1))
(on-new (#(131072) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) P11) P32 P33) S) S S) (C10 S 0)) 9803616 4))
(on-new (#(183) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P33) S) P32 P32) S) S S) (C10 S 0)) 9803664 0))
(on-new (#(57) 22 (C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P33) S) P32 P32) S) S P11) (C10 S 0)) 9803665 0))

> (dump-level-sets maxdepth)
0 ()
1 (0)
2 (0)
3 (0 1)
4 (0 1)
5 (0 1 2)
6 (0 1 2)
7 (0 1 2 3)
8 (0 1 2 3)
9 (0 1 2 3 4)
10   (0 1 2 3 4)
11   (0 1 2 3 4 5)
12   (0 1 2 3 4 5)
13   (0 1 2 3 4 5 6)
14   (0 1 2 3 4 5 6 7)
15   (0 1 2 3 4 5 6 7)
16   (0 1 2 3 4 5 6 7 8 9 10)
17   (0 1 2 3 4 5 6 7 8 9 10 11 12 15)
18   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 21)
19   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 27 31 32 39)
20   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 27 28 29 31 32 39 54 55 66 81 231 1540)
21   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 43 45 46 47 48 52 53 54 55 60 63 64 66 67 79 80 81 94 95 108 121 231 1540)
22   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 46 47 48 49 52 53 54 55 56 57 60 63 64 65 66 67 68 76 78 79 80 81 82 83 94 95 100 101 102 108 119 120 121 135 136 153 156 168 183 210 223 230 231 232 255 256 289 383 435 436 512 1539 1540 1541 2048 2278 2279 6143 6561 7259 7260 9453 12288 24575 26796 53248 65536 98303 131071 131072 557055 1186570 25165823 26357430 50331648 402653184 8589934591 68719476735 141733920768 22539988369407) ; these are 125 numbers.
(missing @ 21: 41,42,44,49..51,56..59,61..62,65,68..78,82..93,96..107,109..120,122..230,232..1539,1541...)
(missing @ 22: 44,50,51, ... )

Let's work on the first mystery number: x1=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) S) S S) (C10 S 0))
Let g stand for the outermost R1:
  (#(1 2 3 4 5 5 15 39 95 223 223 557055 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 15 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) S) 761153 -1)
Because of the (C21 g S S) construction being applied to 1, x1=(g 2 2).
The innermost R1, let's call it h, is relatively simple:
  (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P32) S) 248 0)
As psuedo-code this, applied to (i,j) is:
  set u=j+1
  i times: set u=u+1
  return u
Which we can easily see represents (i,j)->i+j+1
The middle R1, let's call it r, is:
  (#(1 2 3 4 5 3 5 7 9 11 7 11 15 19 23 15 23 31 39 47 31 47 63 79 95) 10 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) 13471 0)
Or:
  (R1 (C23 h P32 P32) S)
Which, applied to (i,j) translates as:
  set u=j+1
  i times: set u=(h u u)=2*u+1
  return u
So then (g i j) translates as:
  set u=j+1
  i times: set u=(r u u)
  return u
So (g 2 2) specializes as:
  set u=(r 3 3)=39
  set u=(r u u)
  return u
Which is:
  set u=40
  39 times: set u=2*u+1
  return u
So x1 is a bit bigger than 40*2^39. Direct computation by this algorithm gives: x1=22539988369407.
Presumably the slowest aspect of the naive implementation is that it implements h via incrementing. Each of the mystery numbers either use this h or its sibling h0=(R1 (C13 S P32) P11),
which represents ordinary two argument addition.
  (#(0 1 2 3 4 1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8) 5 (R1 (C13 S P32) P11) 249 0)
Indeed, if we substitute h and h0 appropriately for the inner R1's in the mystery numbers, the computations are fast enough and we obtain:

x1=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P32) S) S S) (C10 S 0))=22539988369407
x2=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) S) P32 P33) S) S S) (C10 S 0))=8589934591
x3=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) S) P32 P32) P11) P32 P32) S) S S) (C10 S 0))=68719476735
x4=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) S) P32 P32) S) S S) (C10 S 0))=141733920768
x5=(C10 (C21 (R1 (C23 (R1 (C23 (R1 (C13 S P32) P11) P32 P32) P11) P32 P32) S) S S) (C10 S 0))=402653184

where:
(define (h i j) (+ (+ i j) 1)) ;   (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P32) S) 248 0)
(define (h0 i j) (+ i j)) ;        (#(0 1 2 3 4 1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8) 5 (R1 (C13 S P32) P11) 249 0)

Let's consider 65536. Is it computed ala 2^16 or what?
  (#(65536) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) (C10 S (C10 S 0))) 9782747 2)
We can recognize the innermost R1 as a relative of h, call it h2: (i,j)->2*i+j+1:
  (#(1 2 3 4 5 3 4 5 6 7 5 6 7 8 9 7 8 9 10 11 9 10 11 12 13) 7 (R1 (C13 S (C13 S P32)) S) 1295 0)
Working out, (R0 h2 0) turns out to be the squaring function sq:i->i^2:
  (#(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576) 9 (R0 (R1 (C13 S (C13 S P32)) S) 0) 2283 0)
This is curious, because it's code is:
  u=0
  For k from 0 to i-1: u=2*k+u+1
  return u
Working out, (R1 (C13 sq P32) S) is:
  (#(1 2 3 4 5 1 4 9 16 25 1 16 81 256 625 1 256 6561 65536 390625 1 65536 43046721 -1 -1) 13 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) 156171 -1)
And stands for:
  u=j+1
  i times: u=u*u
  return u
So it's g:(i,j)->(j+1)^(2^i) implemented by repeated squaring implemented by repeated tripling. Cool.
Then f=(C21 g S S) means f:i->(i+2)^(2^(i+1))
  (#(4 81 65536 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) 433111 -1)
And finally, f applied to 2 gives 65536.

Considering f applied to other values, we note first that 81 was, in fact, found as (f 1) at complexity 20:
  (#(81) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S S) (C10 S 0)) 1955385 0)
We can speculate that (f 3)=152587890625 will show up at complexity 24 (speculation because it could show up at 23 some other way).

(define (f i) (expt (+ i 2) (expt 2 (+ i 1))))
(for/list ([i (in-range 7)]) (f i))
'(4
  81
  65536
  152587890625
  7958661109946400884391936
  1219760487635835700138573862562971820755615294131238401
  39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816)

I notice that f's brother f2:i->i^(2^i), where the latter S's are converted to P11's made it to OEIS (http://oeis.org/A097547):
  (#(0 1 16 6561 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) P11) P11 P11) 433118 -1)
     0 1 16 6561 4294967296 23283064365386962890625 ...
f2 wasn't used exactly to get 6561 @ complexity 22, though; it was:
  (#(6561) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S P11) (C10 S (C10 S 0))) 9782748 0)
Using the slightly faster sibling f3:i->(i+1)^(2^(i+1))
  (#(1 16 6561 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) P32) S) S P11) 433112 -1)


functions
---------

(#(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576) 9 (R0 (R1 (C13 S (C13 S P32)) S) 0) 2283 0) ; squares
(#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 33554406) 12 (R0 (C22 (R1 (C13 S (C13 S P32)) S) P22 P21) 0) 21844 3320) ; Eulerian numbers A(n=i+1,m=1)
(#(1 1 2 6 24 120 720 5040 40320 362880 3628800 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C11 S (R0 (R1 (C23 (R1 (C13 S P32) S) P32 P33) P11) 0)) 78600 -1) ; factorial

Results to depth 25
-------------------

(number-of-results (0 1 1 2 2 3 3 4 4 5 5 6 6 7 8 8 11 14 16 28 37 64 125 196 586 874))

0	
1	0
2	0
3	0 1
4	0 1
5	0 1 2
6	0 1 2
7	0 1 2 3
8	0 1 2 3
9	0 1 2 3 4
10	0 1 2 3 4
11	0 1 2 3 4 5
12	0 1 2 3 4 5
13	0 1 2 3 4 5 6
14	0 1 2 3 4 5 6 7
15	0 1 2 3 4 5 6 7
16	0 1 2 3 4 5 6 7 8 9 10
17	0 1 2 3 4 5 6 7 8 9 10 11 12 15
18	0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 21
19	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 27 31 32 39
20	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 27 28 29 31 32 39 54 55 66 81 231 1540
21	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 43 45 46 47 48 52 53 54 55 60 63 64 66 67 79 80 81 94 95 108 121 231 1540
22	0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 45 46 47 48 49 52 53 54 55 56 57 60 63 64 65 66 67 68 76 78 79 80 81 82 83 94 95 100 101 102 108 119 120 121 135 136 153 156 168 183 210 223 230 231 232 255 256 289 383 435 436 512 1539 1540 1541 2048 2278 2279 6143 6561 7259 7260 9453 12288 24575 26796 53248 65536 98303 131071 131072 557055 1186570 25165823 26357430 50331648 402653184 8589934591 68719476735 141733920768 22539988369407
23	-1 -1 -1 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 72 73 74 75 76 77 78 79 80 81 82 83 85 86 90 91 93 94 95 96 99 100 101 102 106 107 108 109 110 111 113 119 120 121 122 124 125 126 127 128 133 134 135 136 137 139 140 147 148 149 153 155 156 159 160 162 168 183 191 192 202 210 213 223 230 231 232 243 255 256 277 283 289 324 364 383 405 406 435 436 445 511 512 625 667 703 1533 1539 1540 1541 2048 2278 2279 3081 6143 6561 7259 7260 9453 12288 24575 26796 32131 53248 65536 98303 131071 131072 557055 1186570 1274406 6291453 25165823 26357430 50331648 359026206 402653184 8589934591 68719476735 141733920768 812055963621 22539988369407
24	-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 105 106 107 108 109 110 111 113 115 117 118 119 120 121 122 123 124 125 126 127 128 130 133 134 135 136 137 139 140 144 147 148 149 152 153 154 155 156 157 159 160 162 165 168 169 171 172 179 180 182 183 184 189 190 191 192 193 200 202 203 206 207 210 211 212 213 223 224 228 230 231 232 233 243 247 248 249 252 253 254 255 256 257 263 264 273 275 276 277 283 288 289 290 292 294 295 300 303 312 319 324 325 327 328 333 336 339 340 345 347 357 364 365 373 378 382 383 384 391 399 405 406 419 420 434 435 436 437 445 462 463 468 507 510 511 512 513 574 593 624 625 637 667 675 676 677 703 715 729 741 742 743 750 758 767 768 782 889 895 903 987 991 1014 1023 1024 1025 1179 1200 1279 1301 1405 1458 1526 1533 1536 1539 1540 1541 1542 1598 1728 1774 1806 1820 2045 2047 2048 2049 2092 2120 2277 2278 2279 2280 2349 2559 2631 2632 2704 3070 3081 3143 3240 3241 3307 3727 4094 4468 4608 4609 5103 5110 5457 5467 5999 6131 6143 6144 6560 6561 6562 7259 7260 7261 8191 9452 9453 9454 10201 10202 12090 12091 12275 12287 12288 12289 16370 18589 19683 21942 24492 24575 24576 24577 26795 26796 26797 32131 32384 32385 32754 32765 33673 38781 39366 40957 49150 53247 53248 53249 57330 65534 65535 65536 65537 66045 84100 84101 95266 95267 98303 98304 114688 114689 122866 131070 131071 131072 131073 176820 196607 196608 214833 262142 262144 262145 327662 390624 390625 458329 458738 557055 557056 655357 766480 1179647 1179648 1186569 1186570 1186571 1245166 1274406 1310718 2097131 2097152 2391484 2598060 2598061 2621437 2621439 3145707 3985807 4587502 5505022 6291453 8388605 9699310 11534335 12582909 16777214 25165823 25165824 26357429 26357430 26357431 33554431 43046721 44693785 44693786 50331647 50331648 50331649 52428797 92274666 100663296 100663297 192937983 359026205 359026206 402653183 402653184 402653185 524442691 536870883 774840978 838860800 838860801 1073741795 2684354557 4294967294 4294967296 6442450943 6973568802 7784628195 8589934591 8589934592 12884901887 12884901888 17179869183 17179869184 68719476735 68719476736 78452649022 141733920767 141733920768 141733920769 152587890625 171798691803 292057776128 292057776129 687194767357 703974775735 706073841202 812055963621 1271310319579 1374389534718 2611340115931 2748779069439 10995116277758 15251194969974 22539988369407 22539988369408 22876792454961 46179488366591 46179488366592 211106232532989 213516729579636 347357071281165 404620279021523 422212465065983 844424930131967 844424930131968 1688849860263933 1688849860263936 2161856886993814 3166593487994835 3448068464705534 7036874417766399 20074385379228277 27021597764222976 64449908476890321 472877960873902027 513410357520236541 963770320257286091 30394163647642322002 36893488147419103231 73786976294838206463 73786976294838206464 140656423562035331011 1180591620717411303423 1180591620717411303424 2398076729582241710080 3022314549036572936765439 4.83570327845851700000e+25 9.79229913887849600000e+25 9.79229913887849600000e+25 1.16299474006080120000e+26 1.98263834416799180000e+26 1.18842243771396520000e+29 3.84256588194182100000e+30 7.76435992639790500000e+30 2.31773657869744600000e+32 1.33027946472911320000e+39 3.59175455476860600000e+40 2.47437767155286630000e+45 6.68081971319274000000e+46 3.68571718573977200000e+53 6.60401285218553500000e+59 3.03299400005444700000e+69 1.15792089237316190000e+77 1.73688133855974300000e+77 7.88040123927889500000e+115 2.68156158598851930000e+154 4.02234237898277950000e+154 6.61852284340449400000e+619 5.06272827321578400000e+1849 3.41749567578912970000e+3699 1.59461057795924000000e+7402 9.36527580883619700000e+16033 3.00529489561026960000e+19728 5.67183708204620300000e+29592 8.02826436407212700000e+39456 8.02826436407212700000e+39456 1.20423965461081870000e+39457 1.02360932826412700000e+167696
25	-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 117 118 119 120 121 122 123 124 125 126 127 128 129 130 132 133 134 135 136 137 138 139 140 141 144 145 146 147 148 149 150 152 153 154 155 156 157 158 159 160 161 162 163 165 167 168 169 170 171 172 173 174 175 179 180 182 183 184 185 186 187 189 190 191 192 193 194 198 199 200 201 202 203 206 207 210 211 212 213 214 217 218 219 220 221 222 223 224 228 230 231 232 233 234 241 242 243 244 247 248 249 250 251 252 253 254 255 256 257 261 262 263 264 273 275 276 277 278 281 282 283 284 285 288 289 290 292 294 295 297 298 300 301 303 312 315 317 318 319 320 322 323 324 325 327 328 333 336 339 340 341 342 345 346 347 357 361 363 364 365 373 375 378 381 382 383 384 391 399 403 404 405 406 407 419 420 423 434 435 436 437 444 445 446 447 448 449 462 463 468 484 485 486 496 500 507 510 511 512 513 524 525 526 531 565 568 573 574 593 597 605 607 624 625 626 637 667 668 675 676 677 703 704 715 729 740 741 742 743 750 758 765 767 768 782 826 850 853 889 895 903 972 987 990 991 1014 1023 1024 1025 1083 1093 1109 1129 1151 1152 1176 1179 1200 1215 1225 1278 1279 1280 1301 1336 1365 1370 1405 1444 1458 1482 1526 1533 1534 1535 1536 1537 1539 1540 1541 1542 1579 1598 1653 1728 1774 1806 1820 2040 2045 2047 2048 2049 2092 2120 2187 2210 2211 2277 2278 2279 2280 2303 2304 2349 2559 2631 2632 2704 2815 3069 3070 3081 3082 3143 3159 3160 3192 3240 3241 3307 3727 3876 4094 4188 4279 4371 4468 4607 4608 4609 5103 5110 5403 5457 5467 5999 6131 6143 6144 6560 6561 6562 7167 7259 7260 7261 7654 8191 9316 9452 9453 9454 9999 10000 10201 10202 10240 11780 11781 12090 12091 12275 12287 12288 12289 14642 14707 14878 14884 16370 16384 17496 18589 19683 21942 24492 24575 24576 24577 26623 26795 26796 26797 32131 32132 32384 32385 32754 32765 32832 33673 38227 38781 39366 40957 45150 49150 53247 53248 53249 57330 62329 65534 65535 65536 65537 66045 82622 84100 84101 95266 95267 98303 98304 104976 108812 114687 114688 114689 119327 122866 131070 131071 131072 131073 163835 163839 163967 176820 196607 196608 214833 245760 262142 262144 262145 327662 390624 390625 393216 458329 458738 557055 557056 655357 766480 1179647 1179648 1186569 1186570 1186571 1245166 1274405 1274406 1274407 1310718 1367031 1367032 1572843 2097131 2097152 2391484 2490367 2598060 2598061 2621437 2621439 2755378 2755379 3145707 3985807 4587502 5505022 6291453 6291454 8388605 9699310 11534335 12582909 12582910 16777214 25165823 25165824 26357429 26357430 26357431 27243270 27243271 28151256 33554431 43046721 44693785 44693786 45212176 46008028 50331647 50331648 50331649 52428797 68588312 92274666 100663296 100663297 192937983 359026205 359026206 359026207 402653183 402653184 402653185 524442691 536870883 774840978 838860800 838860801 1073741795 2147483645 2684354557 4294967294 4294967296 4362470401 6442450943 6973568802 7784628195 8589934591 8589934592 12884901887 12884901888 17179869183 17179869184 68719476735 68719476736 78452649022 141733920767 141733920768 141733920769 152587890625 171798691803 171798691835 292057776128 292057776129 687194767357 703974775735 706073841202 812055963621 812055963622 1271310319579 1374389534718 2611340115931 2748779069439 10995116277758 15251194969974 22539988369407 22539988369408 22876792454961 46179488366591 46179488366592 56874039553216 105553116266493 211106232532989 213516729579636 347357071281165 404620279021523 422212465065983 844424930131967 844424930131968 1058369389236436 1125899906842623 1125899906842624 1688849860263933 1688849860263936 2161856886993814 3166593487994835 3448068464705534 7036874417766399 20074385379228277 27021597764222976 64449908476890321 133256400651371031 472877960873902027 513410357520236541 963770320257286091 5824817388998022645 5940442288696033370 5940442288696033371 30394163647642322002 36893488147419103231 73786976294838206463 73786976294838206464 140656423562035331011 1180591620717411303423 1180591620717411303424 2398076729582241710080 3022314549036572936765439 4.83570327845851700000e+25 9.79229913887849600000e+25 9.79229913887849600000e+25 1.16299474006080120000e+26 1.98263834416799180000e+26 1.18842243771396520000e+29 3.84256588194182100000e+30 7.76435992639790500000e+30 2.31773657869744600000e+32 8.50705917302346200000e+38 1.33027946472911320000e+39 1.36112946768375380000e+39 3.59175455476860600000e+40 2.47437767155286630000e+45 6.68081971319274000000e+46 2.41419648100856300000e+51 3.68571718573977200000e+53 6.60401285218553500000e+59 2.43551547333003200000e+60 4.34681841732614300000e+63 3.03299400005444700000e+69 1.15792089237316190000e+77 1.73688133855974300000e+77 2.24194387319372620000e+91 2.24199419874884760000e+114 7.88040123927889500000e+115 2.01117118949138970000e+154 2.68156158598851930000e+154 4.02234237898277950000e+154 6.89161327599049500000e+156 9.03867160095387200000e+461 1.29268024285244020000e+617 6.61852284340449400000e+619 1.26026689735396300000e+1388 6.45256651445229100000e+1390 5.06272827321578400000e+1849 3.41749567578912970000e+3699 6.97735556178128300000e+4273 1.59461057795924000000e+7402 9.14239403954333900000e+8066 1.14320067526968170000e+16030 9.36527580883619700000e+16033 3.00529489561026960000e+19728 5.67183708204620300000e+29592 3.86958576470483500000e+34529 8.02826436407212700000e+39456 8.02826436407212700000e+39456 1.20423965461081870000e+39457 1.02360932826412700000e+167696 1.59605492378844650000e+355115



Results for loop-variable-first-order Primitive Recursion below
===============================================================

The results below are to be understood under the definition of pr_primitives.rkt that lives in branch loop-variable-primrec. Notably in the construction of (R0 f g) it applies f in the loop as (f u i), where u represents the result of previous calls to f inductively and where i is the iteration index, instead of in the more common order in scholarly work of (f i u), which the master branch now adopts. An interesting consequence of this difference is that it made it possible to construct 4083 by depth 20, which was enabled by an especially short representation of the Eulerian numbers sequence as a depth 9 function. Much of the discussion carries over without particular change (except interchange of P31 and P32 or P21 and P22 under R0 and R1 to correct for the change in order of arguments to f) but the differences are harder to reconcile when an (R0 (R1 ...) ...) construction is used.

The shortest representation of the non-negative integers from 0..6 is the literal one in which S is applied repeatedly to 0. We say these representations are the shortest because if you count the number of symbols used to construct them this way, there is no other tree of primitive recursion primitives with fewer leaves that computes the same results. In other words, you have to use at least as many symbols as the literal construction uses; we call this number the complexity and write it second in each of the lists below.
  (#(0) 1 0 1 0)
  (#(1) 3 (C10 S 0) 4 0)
  (#(2) 5 (C10 S (C10 S 0)) 10 0)
  (#(3) 7 (C10 S (C10 S (C10 S 0))) 54 0)
  (#(4) 9 (C10 S (C10 S (C10 S (C10 S 0)))) 287 0)
  (#(5) 11 (C10 S (C10 S (C10 S (C10 S (C10 S 0))))) 1469 0)
  (#(6) 13 (C10 S (C10 S (C10 S (C10 S (C10 S (C10 S 0)))))) 7394 0)
The results above are written in the form (<<result of evaluation>> <<complexity>> <<primitive recursive code>> <<enumeration depth>> <<computation time in milliseconds>>).

Observation: 7 is the first number that has a representation simpler than its direct representation of (C10 (C11 S (C11 S (C11 S (C11 S (C11 S (C11 S S)))))) 0), which has complexity 15.
Instead, the complexity of 7 is 14. The representation is (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0))) as indicated below:

  (#(7) 14 (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0))) 16546 0)

This feat is achieved by applying the the arity 1 function f:n->2*n+3 to 2:
  (#(3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51) 8 (C21 (R1 (C13 S P31) S) S S) 909 0)
[The results of evaluation for arity 1 functions are taken to be its evaluation on the inputs from 0..24]
where f is based on a C21 composition of the arity 2 function g:i,j->i+j+1
  (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P31) S) 246 0)
[The results of evaluation for arity 2 functions are taken to be its evaluation on the inputs from 0..4 crossed with 0..4]
with the arity 1 functions S and S.

For comparison, ordinary addition h:i,j->i+j is at complexity 5, just like g, but uses P11 (the arity 1 identity) instead of S:
  (#(0 1 2 3 4 1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8) 5 (R1 (C13 S P31) P11) 247 0)
Two part multiplication has complexity 12 (though some variation on it might be simpler):
  (#(0 0 0 0 0 0 1 2 3 4 0 2 4 6 8 0 3 6 9 12 0 4 8 12 16) 12 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) (R0 P21 0)) 73096 0)

At complexity 16 we get these non-negative integers:
  (#(8) 16 (C10 S (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0)))) 83122 0)
  (#(9) 16 (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S (C10 S 0)))) 83135 0)
  (#(10) 16 (C10 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C10 S (C10 S 0))) 83180 0)

Eight is obtained by adding 1 to 7, written as above.

Nine uses the same f as above, but applies it to 3.

Ten uses f2:n->3*n+4
  (#(4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76) 10 (C21 (R1 (C13 S (C13 S P31)) S) S S) 4275 0)
Where f2 is built using the arity 2 function g2:i,j->2*i+j+1 using C21 with S and S again:
  (#(1 2 3 4 5 3 4 5 6 7 5 6 7 8 9 7 8 9 10 11 9 10 11 12 13) 7 (R1 (C13 S (C13 S P31)) S) 1300 0)


15 is the first natural number that has a simpler representation as a primitive recursive function than some numbers smaller than itself have (namely 13 and 14.)
=================================================================================================================================================================


  (#(11) 17 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 S (C10 S (C10 S 0)))) 196080 0)
  (#(15) 17 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S 0)) 196621 0)
  (#(12) 17 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S 0)) 196635 0)

15 is computed by applying the arity 1 function f to 1 where f is the function that maps n->(n+3)*2^(n+1)-1 (c.f. http://oeis.org/A099035).
In the notation of pr04.rkt this is:
  (#(5 15 39 95 223 511 1151 2559 5631 12287 26623 57343 122879 262143 557055 1179647 2490367 5242879 11010047 23068671 48234495 100663295 -1 -1 -1) ; which summarizes the output of the function evaluated on 0..24
   13 ; the complexity
   (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) ; the code
   44519 ; the enumeration index
   -1) ; the run-time (-1 indicates timeout >5000).
The core of this function is the two part addition with increment function g:i,j->i+j+1 that we met in the construction of 7.
  (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P31) S) 246 0)
It's used to create the function h:
  (#(1 2 3 4 5 3 5 7 9 11 7 11 15 19 23 15 23 31 39 47 31 47 63 79 95) 10 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 14204 0)
h(i,j) executes the algorithm:
   set u=j+1
   i times: set u=u+u+1
Finally f is constructed via (C21 h S S), so that f(i)=h(i+1,i+1).

13 and 14 aren't much more complex than 15, though, we obtain them at complexity 18 and 19.

  (#(13) 18 (C10 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C10 S (C10 S (C10 S 0)))) 417210 0)
  (#(21) 18 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) (C10 S 0)) 418469 0)

13 is built like 10 was, but applies f2:n->3*n+4 to 3.

21 uses the function:
  (#(3 21 1540 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) 99246 -1)
based on the arity 2 function g2:i,j-> @@
  (#(1 2 3 4 5 1 3 6 10 15 1 6 21 55 120 1 21 231 1540 7260 1 231 26796 -1 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) 33618 -1)
Which uses f3:i-> i*(i+1)/2
  (#(0 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210 231 253 276 300) 7 (R0 (R1 (C13 S P31) S) 0) 488 0)


  (#(16) 19 (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S 0))) 968529 0)
  (#(14) 19 (C10 (R0 (C12 S (R1 (C13 S P31) S)) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 968605 0)
  (#(26) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 968615 0)
  (#(19) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)) (C10 S (C10 S (C10 S 0)))) 968731 0)
  (#(18) 19 (C10 (R0 (C12 S (R1 (C13 S (C13 S P31)) S)) 0) (C10 S (C10 S (C10 S 0)))) 968752 0)
  (#(39) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S (C10 S 0))) 969156 0)
  (#(31) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S P11) (C10 S (C10 S 0))) 969157 0)
  (#(23) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) P11) S P11) (C10 S (C10 S 0))) 969161 0)
  (#(32) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S (C10 S 0))) 969170 0)
  (#(24) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S P11) (C10 S (C10 S 0))) 969171 0)
  (#(17) 19 (C10 (C21 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) S P11) (C10 S 0)) 971129 0)
  (#(22) 19 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) S P11) (C10 S 0)) 971157 0)
  (#(27) 19 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) S S) (C10 S 0)) 971188 0))

Where 26, for example, applies the following arity 1 function f to 4:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 33554406) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0) 2329 2504)
We can recognize this as the sequence of Eulerian numbers for permutations of n=(i+1) things with exactly m=1 ascents. The regular sequence (i.e. for n=i and m=1) has the same complexity:
  (#(0 0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191) 9 (R0 (R1 (C13 S (C13 S P31)) P11) 0) 2330 1258)
[C.f.: http://oeis.org/A000295. See also: http://en.wikipedia.org/wiki/Eulerian_number
The Eulerian number A(n,m) is the number of permutations of n items that have exactly m "ascents" E.g. the value of our function at 2 is 4 because the permutations of 3=(2+1) things with one ascent are (1 3 2), (2 1 3), (2 3 1), and (3 1 2) [ (1 2 3) and (3 2 1) ascend 2 and 0 times, instead]]
We can understand how the first sequence is computed better by understanding the arity two function g that it's constructed from:
  (#(1 2 3 4 5 3 4 5 6 7 5 6 7 8 9 7 8 9 10 11 9 10 11 12 13) 7 (R1 (C13 S (C13 S P31)) S) 1300 0)
Applied to (i,j), g executes the psuedo-code:
  set u=j+1
  i times: set u=u+2
So g(i,j)=2*i+j+1
Then f is built as (R0 g 0) which when applied to i executes the psuedo-code:
  set u=0
  for j from 0..(i-1), set u=g(u,j)=2*u+j+1

39 is computed using the same f used by 15, but applying it to 2.

Here is a summary of the available non-negative integers by complexity
1    (0)
2    (0)
3    (0 1)
4    (0 1)
5    (0 1 2)
6    (0 1 2)
7    (0 1 2 3)
8    (0 1 2 3)
9    (0 1 2 3 4)
10   (0 1 2 3 4)
11   (0 1 2 3 4 5)
12   (0 1 2 3 4 5)
13   (0 1 2 3 4 5 6)
14   (0 1 2 3 4 5 6 7)
15   (0 1 2 3 4 5 6 7)
16   (0 1 2 3 4 5 6 7 8 9 10)
17   (0 1 2 3 4 5 6 7 8 9 10 11 12 15) ; 15 beats 13 and 14
18   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 21) ; 15 and 21 beat 14 and 16..20
19   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 26 27 31 32 39) ; these beat 20 25 28..30 33..38
20   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 26 27 28 29 31 32 39 48 54 55 66 127 231 1540 4083) ; so 25, 30,33..38,40..47,49..53, etc. are all more complex than 4083

We derive the following initial part of the ordering of the non-negative integers according to their complexity as primitive recursive expressions
==================================================================================================================================================

(0)         <
(1)         <
(2)         <
(3) 	    <
(4)         <
(5)         <
(6) 	    <
(7) 	    <
(8 9 10)    <
(11 12 15)  < ; so 15 is simpler than 13 and 14
(13 21)     < ; so 21 is simpler than 14 and 16..20
(14 16 17 18 19 22 23 24 26 27 31 32 39) <  ; so 22, 23, 24, 26, 27, 31, 32, and 39 are simpler than 20, 25, 28..30, and 33..38
(20 28 29 48 54 55 66 127 231 1540 4083) <


  (#(127) 20 (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 S (C10 S (C10 S 0)))) 2150659 0)
  (#(48) 20 (C10 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0) (C10 S (C10 S (C10 S 0)))) 2150666 0)
  (#(1540) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) (C10 S (C10 S 0))) 2151588 0)
  (#(231) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S P11) (C10 S (C10 S 0))) 2151589 0)
  (#(55) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) P11 S) (C10 S (C10 S 0))) 2151590 0)
  (#(29) 20 (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S P31) S) 0) P31)) S) S S) (C10 S 0)) 2156820 0)
  (#(66) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) (C13 S P31)) S) S S) (C10 S 0)) 2156841 0)
  (#(28) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) (C13 S P31)) S) S P11) (C10 S 0)) 2156842 0)
  (#(54) 20 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P31) S)) 0) P31) S) S S) (C10 S 0)) 2156849 0)
  (#(20) 20 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P31) S)) 0) P31) S) S P11) (C10 S 0)) 2156850 0)
  (#(4083) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) S S) (C10 S 0)) 2156858 0))

So 4083 is simpler than 25, for example. 4083 is the 40th simplest natural number.
Where 4083, for example is based on the arity 1 function q with the unknown fast-growing function below applied to 1:
  (#(4 4083 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) S S) 484359 -1)
To understand this function, notice that it's using the Eulerian sequence with 1 ascent as used to construct 26, let's call this f:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 33554406) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0) 2329 2504)
Suggestively, we can see that 4083 is the 11th number in this sequence and that 11 is the 3rd number in this sequence.
From f, it constructs the arity 2 function g=(R1 (C13 f P31) S)=(R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S).
Applied to (i,j) we can interpret g as the pseudo-code algorithm: 
	set u=j+1
	i times: set u=f(u)
	return u
  (#(1 2 3 4 5 1 4 11 26 57 1 26 4083 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) 167543 -1)
Finally, q is constructed as (C21 g S S), which represents the function that takes i to g(i+1,i+1). Let's confirm that this constructs 4083 when applied to 1.
  q(1)=g(2,2)=f(f(3))=f(11)=4083. Good. 
So we can compute q(2), which would have complexity only 22, as:
  q(2)=g(3,3)=f(f(f(4)))=f(f(26))=f(134217700)= ... big ... maybe ~ 2^(2^27) ~~ 10^40403554

25 is at complexity 21 (unless it shows up in 20 before it finishes) since it can be computed as (C10 S 24) and 24 has complexity 19.

127 uses:
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) 23232 -1)

1540 uses the same function as 21 evaluated at 2.

231 is very similar but by changing an S into a P11 goes one less deep into the second argument of 21's g2.

Here's what complexity 21 brings (preliminary):

(on-new (#(40) 21 (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S (C10 S 0)))) 4810719 0))
(on-new (#(33) 21 (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S (C10 S 0)))) 4810722 0))
(on-new (#(25) 21 (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S P11) (C10 S (C10 S 0)))) 4810723 0))
(on-new (#(57) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 S (C10 S (C10 S (C10 S (C10 S 0)))))) 4810825 0))
(on-new (#(42) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)) (C10 S (C10 S (C10 S (C10 S 0))))) 4810941 0))
(on-new (#(41) 21 (C10 (R0 (C12 S (R1 (C13 S (C13 S P31)) S)) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 4810962 0))
(on-new (#(58) 21 (C10 (R0 (R1 (C13 S (C13 S (C13 S P31))) S) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 4811002 0))
(on-new (#(95) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S (C10 S (C10 S 0)))) 4811366 0))
(on-new (#(79) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S P11) (C10 S (C10 S (C10 S 0)))) 4811367 0))
(on-new (#(47) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) P11 S) (C10 S (C10 S (C10 S 0)))) 4811368 0))
(on-new (#(63) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) P11) S P11) (C10 S (C10 S (C10 S 0)))) 4811371 0))
(on-new (#(80) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S (C10 S (C10 S 0)))) 4811380 0))
(on-new (#(64) 21 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S P11) (C10 S (C10 S (C10 S 0)))) 4811381 0))
(on-new (#(45) 21 (C10 (R0 (R1 (C13 S (C13 S (C13 S P31))) S) (C10 S 0)) (C10 S (C10 S (C10 S 0)))) 4811441 0))
(on-new (#(46) 21 (C10 (C21 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P31)) S) S S) (C10 S (C10 S 0))) 4813307 0))
(on-new (#(38) 21 (C10 (C21 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P31)) S) S P11) (C10 S (C10 S 0))) 4813308 0))
(on-new (#(30) 21 (C10 (C21 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P31)) P11) S P11) (C10 S (C10 S 0))) 4813312 0))
(on-new (#(53) 21 (C10 (C21 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) S S) (C10 S (C10 S 0))) 4813338 0))
(on-new (#(37) 21 (C10 (C21 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) P11) S P11) (C10 S (C10 S 0))) 4813343 0))
(on-new (#(121) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) S S) (C10 S (C10 S 0))) 4813366 0))
(on-new (#(94) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) S P11) (C10 S (C10 S 0))) 4813367 0))
(on-new (#(67) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) P11) S P11) (C10 S (C10 S 0))) 4813371 0))
(on-new (#(43) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P32) S) S S) (C10 S (C10 S 0))) 4813374 0))
(on-new (#(35) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P32) S) S P11) (C10 S (C10 S 0))) 4813375 0))
(on-new (#(60) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P33) S) S S) (C10 S (C10 S 0))) 4813382 0))
(on-new (#(52) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P33) P11) S S) (C10 S (C10 S 0))) 4813386 0))
(on-new (#(108) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) S S) (C10 S (C10 S 0))) 4813398 0))
(on-new (#(81) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) S P11) (C10 S (C10 S 0))) 4813399 0))
(on-new (#(36) 21 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) P11 S) (C10 S (C10 S 0))) 4813400 0))
(on-new (#(34) 21 (C10 (C21 (R1 (C13 (C21 (R1 (C13 S (C13 S P31)) S) S S) P31) S) S P11) (C10 S 0)) 4826195 0))

No new giants, so 4083 is still the biggest until complexity 22 when it's trumped by q(2) and, much smaller, 5*2^127-1="Marc's first big number" (below) among whatever else.


The revised search strategy invalidates some of the results below:
==================================================================

The results below are based on a search strategy that used a right associativity rule that conflicted with "unique function" technique I use to prevent an effectively exhaustive search. Additionally, the approach taken was to discard functions that were slow to compute (for the purpose of building further functions). To explore results at this stage of the work use the branch landmark-22-buggy.

The many functions identified on OEIS and otherwise are still valid, and the conjecture about "Marc's big number" might still be about right, though other large ones are probably missed and 4083 at complexity 20 is pretty impressive.

Observation: 7 is the first number that has a representation simpler than its direct representation of (C10 (C11 S (C11 S (C11 S (C11 S (C11 S (C11 S S)))))) 0), which has complexity 15.
Instead, the complexity of 7 is 14. Confer the following results which list the results as (#(<<result of evaluation>>) <<complexity>> <<primitive recursive code>>)

  (#(0) 1 0)
  (#(1) 3 (C10 S 0))
  (#(2) 5 (C10 (C11 S S) 0))
  (#(3) 7 (C10 (C11 S (C11 S S)) 0))
  (#(4) 9 (C10 (C11 S (C11 S (C11 S S))) 0))
  (#(5) 11 (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0))
  (#(6) 13 (C10 (C11 S (C11 S (C11 S (C11 S (C11 S S))))) 0))
  (#(7) 14 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) S) 0))
  (#(8) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) S) 0))
  (#(9) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) S) 0))
  (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  (#(11) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S (C13 S P31)))) S) S S) S) 0))
  (#(12) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) (C11 S S)) 0))
  (#(13) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) (C11 S S)) 0))

Observation: To depth 18, the ordering induced on the non-negative integers by their complexity is monotonic with the ordinary ordering. We see 0..6 appear using their direct representations, then see 7 at 14, then 8,9,10 at 16 10,11,12,13 at 18. So the non-negative integers from 0..13 are all ordered the normal way by primitive-recursive complexity.

Continuing to depth 19 adds the following:
  (#(14) 19 (C10 (C11 (R0 (C12 S (R1 (C13 S P31) S)) 0) (C11 S (C11 S (C11 S S)))) 0)))
  (#(15) 19 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) S S) (C11 S S)) 0))
  (#(16) 19 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) S) S S) (C11 S S)) 0))

But, actually, this list is incomplete. The search is not completely exhaustive because functions that are too slow to evaluate
are not reused in further constructions in the current search algorithm. Consider, for example, the first slow arity 1 function (the only slow function of complexity <=10) is:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 -1) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0))
We can recognize this as the sequence of Eulerian numbers for exactly m=1 ascents. 
[C.f.: http://oeis.org/A000295 which has an extra 0 at the beginning but is otherwise identical. See also: http://en.wikipedia.org/wiki/Eulerian_number
The Eulerian number A(n,m) is the number of permutations of n items that have exactly m "ascents" E.g. the value of our function at 3 is 4 because the permutations of 1..3 with one ascent are (1 3 2), (2 1 3), (2 3 1), and (3 1 2) [ (1 2 3) and (3 2 1) ascend 2 and 0 times, instead]]
Evaluating this function at 4 gives the value 26 with a construction that is also of complexity 19 so we should add the entry:
  (#(26) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0)))
So depth 19 adds 14,15,16, and 26. 

Depth 20 adds 17:
  (#(17) 20 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) (C11 S (C11 S S))) 0)))

Depth 21 adds: 18..25, 27, 29, 31, 40. 
  (#(18) 21 (C10 (C11 (C21 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P33)) P11) S S) (C11 S S)) 0))
  (#(19) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) S P11) (C11 S (C11 S S))) 0))
  (#(20) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) P11) S S) (C11 S (C11 S S))) 0))
  (#(21) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P33 P31) P11) S S) (C11 S S)) 0))
  (#(22) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P33 P31) S) S S) (C11 S S)) 0))
  (#(23) 21 (C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) (C10 S 0)))
  (#(24) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P33 P31) P11) S S) (C11 S S)) 0))
  (#(25) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P33 P31) S) S S) (C11 S S)) 0))
  (#(27) 21 (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0))
  (#(29) 21 (C20 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 (C11 S (C11 S S)) 0) 0))
  (#(31) 21 (C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S (C11 S (C11 S S))) 0) 0)))
  (#(40) 21 (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0))

This list is again incomplete because of the Eulerian numbers function. Applying it to 5 yields 57:
  (#(57) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0)))
We're also missing the result of this slow function applied to 4: (the function is 3*2^n-n-2, c.f. http://oeis.org/A079583)
  (#(1 3 8 19 42 89 184 375 758 1525 3060 6131 12274 24561 49136 98287 196590 393197 786412 1572843 3145706 6291433 12582888 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)))
Yielding 42:
  (#(42) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)) (C10 (C11 S (C11 S (C11 S S))) 0)))

If this is the complete list, then 27,29,31, 40, 42, and 57 are simpler than 28,30,32..39 as well as 41,43..56 and 58..

Interestingly, the non-incremental newborns (and 23) all use C20 at the top-level.
     27 applies f=(R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) to (3,0).
            (f j 0)=3^j. (f j 1) is A008776 Pisot sequences E(2,6), L(2,6), P(2,6), T(2,6). (f j 2)=3^(j+1). Curious. (f j 4) is A003946 (off by one). Huh.
     29 applies (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) to (3,0)
     31 applies f=(R1 (C23 (R1 (C13 S P31) S) P31 P31) S) to (4,0)
            (f j 0)=2^(j+1)-1=2*2^j-1. (f j 1)=3*2^j-1. Conjecture (f j k)=(k+2)*2^j-1. Seems to work.
     40 applies f=(R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) to (3,0)
            (f j 0)=(3^(j+1) - 1)/2. (f j 1)=A060816(j+1). (f j 2) doesn't appear to be in OEIS but still obeys a(n)=3*a(n-1)+1; seems the base case is just set as (k+1).
Hmmm... I can also construct 40 using the slow arity 1 function (documented below as A003462):
  (#(0 1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0))
  So 40=(C10 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0) (C10 (C11 S (C11 S (C11 S S))) 0)), applying it to 4, but that's complexity 22, so it hasn't hurt me in this way.

Depth 22 adds: 28,32,39 (still missing 30,33..38 as well as 41..?)
  (#(28) 22 (C10 (C11 (R0 (R1 (C13 S P31) S) 0) (C11 (C21 (R1 (C13 S P31) S) S S) (C11 S S))) 0))
  (#(32) 22 (C20 (C22 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P22 P22) 0 (C10 (C11 S (C11 S S)) 0)))
  (#(39) 22 (C20 (C22 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) P22 P22) 0 (C10 (C11 S (C11 S S)) 0))))
Actually, from the discussion below (c.f. Marc's big number), depth 22 also adds at least two results which use really slow functions
and so aren't in the present search. I.e. if I change the search to reuse slow functions, I'd expect to see:
   (#(-1) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))) ; the -1 is because it'd still take too long to compute
   (#(-1) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))) ; which I conjecture is 5*2^127-1=850705917302346158658436518579420528639
I conjecture that these are the first "surprisingly big" primitive recursive numbers. (I've informally checked slow functions of complexity 12 or less and these seem like the only candidates.)


We can predict that at depth 23, we'll definitely see the successors of everything at 21, so 30 and 41 will appear among who knows what else.
  41 and 30 were found as successors already at this point (26 wasn't found in this form because of the way I enforce accociativity of C10 and C11 in the search)
    (on-new #(41) ((C10 S (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0)) 41 23))
    (on-new #(30) ((C10 S (C20 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 (C11 S (C11 S S)) 0) 0)) 30 23))
We'll also find the next Eulerian number (by applying it to 6):
   (#(120) 23 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S (C11 S (C11 S S))))) 0)))
Presumably we're missing additional fancy things from l-slow by this point, like applying:
  (#(0 0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 32285032 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0))
to 5 to get 58:
 (#(58) 23 (C10 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0) (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0)))
Or applying one of the complexity 13 slow functions to 4.... Clearly it's time to run something more systematic to deal with these slow cases.

Nevertheless, let's look ahead a bit:

Claim: 100 has complexity 29 or less. [ed. it has complexity 22 in standard-order primrec viz: (on-new (#(100) 22 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P32)) S) 0) (C13 S P32)) S) S P11) (C10 S 0)) 9802818 0)) ]
Proof:
  10 has complexity 16 (or less), viz:
    (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  Squaring has complexity 12 (or less), viz:
    (#(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P22 P21) 0))
  Combining these with C10 has total complexity 16+12+1=29:
    (C10 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P22 P21) 0) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))

Similarly: 1024 has complexity 29 or less:
  10 has complexity 16 (or less), viz:
    (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  j->2^j has complexity 12 (or less), viz:
    (#(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216) 12 (C11 S (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0)))
  Combining with C10 has complexity 16+12+1=29:
    (C10 (C11 S (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0)) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))

Hmm: 1023 has complexity 27 or less: (simpler?)
   Just use j->2^j-1, which has complexity 10, instead.
     (#(0 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215) 10 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0))
   (C10 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
I notice that trying the trick used for 31 doesn't actually help; it has complexity 28, since 9 isn't "simpler" than 10. (It would get us 2047 @ 28, though) Viz:
   Apply f=(R1 (C23 (R1 (C13 S P31) S) P31 P31) S) to (9,0)
   1023=(C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) S) 0) 0)

There are bigger numbers at that complexity.
E.g.: 76457 @ 19+7+1=27
   (evaluation-timeout (R0 (R1 (C13 S (C23 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P33 P31)) S) 0) 19 #(0 1 7 76457 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
   76457=(C10 (R0 (R1 (C13 S (C23 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P33 P31)) S) 0) (C10 (C11 S (C11 S S)) 0))
Or: 72701268 @ 18+7+1=26
   (C10 (R0 (R1 (C13 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) P31) S) 0) (C10 (C11 S (C11 S S)) 0))
From the slow function: (which fortunately wasn't too slow for me to obtain this result; some of the other slows might be bigger)
  (#(0 1 12 72701268 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 18 (R0 (R1 (C13 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) P31) S) 0))
One of these might exceed it.
  (#(2 4 32 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) (C10 (C11 S S) 0)))
  (#(2 7 383 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S S) 0)))
  (#(1 4 62 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P31)) S) (C10 S 0)))
  (#(1 3 29 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) P11) (C10 S 0)))
  (#(1 5 157 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 S 0)))
  (#(1 3 54 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) (C10 S 0)))
  (#(1 4 202 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 S 0)))
  (#(1 3 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P32) S) (C10 S 0)))
  (#(1 3 30 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P33) S) (C10 S 0)))
  (#(1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S S)) (C10 S 0)))
  (#(1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) S)) (C10 S 0)))
  (#(0 2 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) (C11 S S)) 0))
  (#(0 2 31 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) (C11 S S)) 0))
  (#(0 3 39 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S (C11 S S))) 0))
  (#(0 3 25 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) S))) 0))
  (#(0 3 32 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S S))) 0))
  (#(0 2 23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S)) 0))
  (#(0 2 19 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S)) 0))
E.g. (taking the second, which is "in the lead"):
  (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S S) 0)) (C10 (C11 S (C11 S S)) 0)) == ??? @ 24.
Or this thing that I haven't been able to evaluate at 4 despite days of letting the computer try.
  (#(0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0))
Or, bigger presumably, but still at complexity 12:
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0))
So what number is this?: (evaluating the former at 4 for complexity 12+9+1=22)
  (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))
Let's call it Marc's first big number, eh? :) To find out what it is, I use diagnostic versions of the primitive recursion constructions:
  (C10 (R0-diagnose (R1-diagnose (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))
It seems that to compute f(4) it uses g(n) = 5*2^(n+1)-1, n>0, so I think f(4) is g(126)=5*2^127-1. The neat bit is that I (suspect) the multiplier 5 comes from f(2) and the exponent of 127 comes from f(3). I suppose I should really "read the code" and check but that seems to be the idea. So (speculating) f(5) would be 127*2^(5*2^127-1)-1. Yeesh. No wonder it's slow.
Interesting, so if I change the code to keep slow functions around for growing new results, I'll get some truly giant arity 0 results by depth 22. Neat. (well, they'll prob. timeout. heh)

Let's check some early slows against OEIS:
(#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 -1) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0))
http://oeis.org/A000295:   Eulerian numbers (Euler's triangle: column k=2 of A008292, column k=1 of A173018)

(#(1 2 5 12 27 58 121 248 503 1014 2037 4084 8179 16370 32753 65520 131055 262126 524269 1048556 2097131 4194282 8388585 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) P11) (C10 S 0)))
http://oeis.org/A000325 has an extra 1 at the beginning: 2^n - n

(#(1 3 8 19 42 89 184 375 758 1525 3060 6131 12274 24561 49136 98287 196590 393197 786412 1572843 3145706 6291433 12582888 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)))
http://oeis.org/A079583: 3*2^n-n-2

(#(0 0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 32285032 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0))
(#(0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 -1 -1 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) S) 0))
http://oeis.org/A000340: 1, 5, 18, 58, 179, 543, 1636, 4916, 14757 ... a(0)=1, a(n)=3*a(n-1)+n+1

(#(0 2 7 18 41 88 183 374 757 1524 3059 6130 12273 24560 49135 98286 196589 393196 786411 1572842 3145705 6291432 12582887 -1 -1) 11 (R0 (C12 S (R1 (C13 S (C13 S P31)) S)) 0))
http://oeis.org/A095151 a(n+3) = 3*a(n+2)-2*a(n+1)+1 with a(0)=0, a(1)=2. A sequence generated from a Bell difference row matrix, companion to A095150

(#(1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 -1) 12 (C11 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0) S))
(#(1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 -1) 12 (R0 (C22 (R1 (C13 S P31) S) P21 P21) (C10 S 0)))
http://oeis.org/A000225  2^n - 1. (Sometimes called Mersenne numbers, although that name is usually reserved for A001348.) 

Six for six.

  (#(0 0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) P11) 0))
  (#(0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0))
Too ambiguous. None of the hits seem big enough in the next entry to be a match.

  (#(0 0 1 2 4 10 50 1231 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P32) P11) 0))
  (#(0 1 2 4 10 50 1231 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P32) S) 0))
Nope. Should I figure out why its important and then contribute it? :)

  (#(0 0 1 4 15 64 325 1956 13699 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) P11) 0))
A007526	    a(n) = n(a(n-1) + 1)

  (#(0 1 3 9 31 129 651 3913 27399 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) S) 0))
basically the same as: A111063 a(0) = 1; a(n) = (n-1)*a(n-1)+n.

  (#(0 0 1 0 3 4 6 10 18 34 66 130 258 514 1026 2050 4098 8194 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P32 P32) P11) 0))
  (#(0 1 0 3 4 6 10 18 34 66 130 258 514 1026 2050 4098 8194 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P32 P32) S) 0))
basically: A052548 2^n+2.

  (#(0 0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) P11) 0))
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0))
Nope.

  (#(0 0 1 3 9 49 1230 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P32) P11) 0)))
  (#(0 1 3 9 49 1230 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P32) S) 0))
Nope.

  (#(0 0 1 5 23 119 719 5039 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) 0))
A033312:  n! - 1. (Hey, I didn't know I got factorial. yay!) (Further evidence that maybe I should interpret the basis of the PR to be 1 and S instead of 0 and S? Ah well.)
(for reference:
(#(1 1 2 6 24 120 720 5040 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) (R0 P21 0)) (C10 S 0)))
Oh. Right. It didn't find the (C11 S ...) version of it because I don't include slow functions for further building -- maybe I need to change that and keep them anyway.
)

  (#(0 1 4 15 64 325 1956 13699 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) S) 0))
A007526  a(n) = n(a(n-1) + 1)

  (#(0 1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0))
A003462	    (3^n - 1)/2. (lots of stories about it)

  (#(0 3 9 21 45 93 189 381 765 1533 3069 6141 12285 24573 49149 98301 196605 393213 786429 1572861 3145725 6291453 12582909 25165821 -1) 12 (R0 (C12 (C21 (R1 (C13 S P31) S) S S) P21) 0))
basically A068156 G.f.: (x+2)*(x+1)/((x-1)*(x-2)) = Sum(n=0,inf,a(n)*(x/2)^n).

  (#(0 2 6 14 30 62 126 254 510 1022 2046 4094 8190 16382 32766 65534 131070 262142 524286 1048574 2097150 4194302 8388606 16777214 -1) 12 (R0 (C12 S (C22 (R1 (C13 S P31) S) P21 P21)) 0))
A000918	    2^n - 2

... and so on. So 14 for 17. Pretty good. I wonder how I'd do on the converse? Well, I nail A000004 the zero sequence but 1..3 look hard to get. Hmmm. I guess I could check a random sample of OEIS, but not today....

Slowish functions of two arguments at complexity 11. Let's see.
  (#(1 2 3 4 5 1 3 6 10 15 1 6 21 55 120 1 21 231 1540 7260 1 231 26796 -1 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S))
  (#(0 1 2 3 4 0 1 3 6 10 0 1 6 21 55 0 1 21 231 1540 0 1 231 26796 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) P11))
Hmmm. (f 0 i) is (S i). (f 1 i) is A002817 Doubly triangular numbers: n*(n+1)*(n^2+n+2)/8. (f 2 i) is the triply triangular (A064322) (f 3 i) is indeed A066370 Quadruply triangular numbers.
Seems that we've identified all such sequences with one nice function. Presumably fifth and sixth triangular are readily computed if anyone wants them.


  




