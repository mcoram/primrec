The shortest representation of the non-negative integers from 0..6 is the literal one in which S is applied repeatedly to 0. We say these representations are the shortest because if you count the number of symbols used to construct them this way, there is no other tree of primitive recursion primitives with fewer leaves that computes the same results. In other words, you have to use at least as many symbols as the literal construction uses; we call this number the complexity and write it second in each of the lists below.
  (#(0) 1 0 1 0)
  (#(1) 3 (C10 S 0) 4 0)
  (#(2) 5 (C10 S (C10 S 0)) 10 0)
  (#(3) 7 (C10 S (C10 S (C10 S 0))) 54 0)
  (#(4) 9 (C10 S (C10 S (C10 S (C10 S 0)))) 287 0)
  (#(5) 11 (C10 S (C10 S (C10 S (C10 S (C10 S 0))))) 1469 0)
  (#(6) 13 (C10 S (C10 S (C10 S (C10 S (C10 S (C10 S 0)))))) 7394 0)
The results above are written in the form (<<result of evaluation>> <<complexity>> <<primitive recursive code>> <<enumeration depth>> <<computation time in milliseconds>>).

Observation: 7 is the first number that has a representation simpler than its direct representation of (C10 (C11 S (C11 S (C11 S (C11 S (C11 S (C11 S S)))))) 0), which has complexity 15.
Instead, the complexity of 7 is 14. The representation is (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0))) as indicated below:

  (#(7) 14 (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0))) 16546 0)

This feat is achieved by applying the the arity 1 function f:n->2*n+3 to 2:
  (#(3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51) 8 (C21 (R1 (C13 S P31) S) S S) 909 0)
[The results of evaluation for arity 1 functions are taken to be its evaluation on the inputs from 0..24]
where f is based on a C21 composition of the arity 2 function g:i,j->i+j+1
  (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P31) S) 246 0)
[The results of evaluation for arity 2 functions are taken to be its evaluation on the inputs from 0..4 crossed with 0..4]
with the arity 1 functions S and S.

For comparison, ordinary addition h:i,j->i+j is at complexity 5, just like g, but uses P11 (the arity 1 identity) instead of S:
  (#(0 1 2 3 4 1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8) 5 (R1 (C13 S P31) P11) 247 0)
Two part multiplication has complexity 12 (though some variation on it might be simpler):
  (#(0 0 0 0 0 0 1 2 3 4 0 2 4 6 8 0 3 6 9 12 0 4 8 12 16) 12 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) (R0 P21 0)) 73096 0)

At complexity 16 we get these non-negative integers:
  (#(8) 16 (C10 S (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S 0)))) 83122 0)
  (#(9) 16 (C10 (C21 (R1 (C13 S P31) S) S S) (C10 S (C10 S (C10 S 0)))) 83135 0)
  (#(10) 16 (C10 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C10 S (C10 S 0))) 83180 0)

Eight is obtained by adding 1 to 7, written as above.

Nine uses the same f as above, but applies it to 3.

Ten uses f2:n->3*n+4
  (#(4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76) 10 (C21 (R1 (C13 S (C13 S P31)) S) S S) 4275 0)
Where f2 is built using the arity 2 function g2:i,j->2*i+j+1 using C21 with S and S again:
  (#(1 2 3 4 5 3 4 5 6 7 5 6 7 8 9 7 8 9 10 11 9 10 11 12 13) 7 (R1 (C13 S (C13 S P31)) S) 1300 0)


15 is the first natural number that has a simpler representation as a primitive recursive function than some numbers smaller than itself have (namely 13 and 14.)
=================================================================================================================================================================


  (#(11) 17 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 S (C10 S (C10 S 0)))) 196080 0)
  (#(15) 17 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S 0)) 196621 0)
  (#(12) 17 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S 0)) 196635 0)

15 is computed by applying the arity 1 function f to 1 where f is the function that maps n->(n+3)*2^(n+1)-1 (c.f. http://oeis.org/A099035).
In the notation of pr04.rkt this is:
  (#(5 15 39 95 223 511 1151 2559 5631 12287 26623 57343 122879 262143 557055 1179647 2490367 5242879 11010047 23068671 48234495 100663295 -1 -1 -1) ; which summarizes the output of the function evaluated on 0..24
   13 ; the complexity
   (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) ; the code
   44519 ; the enumeration index
   -1) ; the run-time (-1 indicates timeout >5000).
The core of this function is the two part addition with increment function g:i,j->i+j+1 that we met in the construction of 7.
  (#(1 2 3 4 5 2 3 4 5 6 3 4 5 6 7 4 5 6 7 8 5 6 7 8 9) 5 (R1 (C13 S P31) S) 246 0)
It's used to create the function h:
  (#(1 2 3 4 5 3 5 7 9 11 7 11 15 19 23 15 23 31 39 47 31 47 63 79 95) 10 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 14204 0)
h(i,j) executes the algorithm:
   set u=j+1
   i times: set u=u+u+1
Finally f is constructed via (C21 h S S), so that f(i)=h(i+1,i+1).

13 and 14 aren't much more complex than 15, though, we obtain them at complexity 18 and 19.

  (#(13) 18 (C10 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C10 S (C10 S (C10 S 0)))) 417210 0)
  (#(21) 18 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) (C10 S 0)) 418469 0)

13 is built like 10 was, but applies f2:n->3*n+4 to 3.

21 uses the function:
  (#(3 21 1540 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 14 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) 99246 -1)
based on the arity 2 function g2:i,j-> @@
  (#(1 2 3 4 5 1 3 6 10 15 1 6 21 55 120 1 21 231 1540 7260 1 231 26796 -1 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) 33618 -1)
Which uses f3:i-> i*(i+1)/2
  (#(0 1 3 6 10 15 21 28 36 45 55 66 78 91 105 120 136 153 171 190 210 231 253 276 300) 7 (R0 (R1 (C13 S P31) S) 0) 488 0)


  (#(16) 19 (C10 S (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S 0))) 968529 0)
  (#(14) 19 (C10 (R0 (C12 S (R1 (C13 S P31) S)) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 968605 0)
  (#(26) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 S (C10 S (C10 S (C10 S 0))))) 968615 0)
  (#(19) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)) (C10 S (C10 S (C10 S 0)))) 968731 0)
  (#(18) 19 (C10 (R0 (C12 S (R1 (C13 S (C13 S P31)) S)) 0) (C10 S (C10 S (C10 S 0)))) 968752 0)
  (#(39) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S S) (C10 S (C10 S 0))) 969156 0)
  (#(31) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) S P11) (C10 S (C10 S 0))) 969157 0)
  (#(23) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P31) P11) S P11) (C10 S (C10 S 0))) 969161 0)
  (#(32) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S S) (C10 S (C10 S 0))) 969170 0)
  (#(24) 19 (C10 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) S P11) (C10 S (C10 S 0))) 969171 0)
  (#(17) 19 (C10 (C21 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) S P11) (C10 S 0)) 971129 0)
  (#(22) 19 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) S P11) (C10 S 0)) 971157 0)
  (#(27) 19 (C10 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) S S) (C10 S 0)) 971188 0))

Where 26, for example, applies the following arity 1 function f to 4:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 33554406) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0) 2329 2504)
We can recognize this as the sequence of Eulerian numbers for permutations of n=(i+1) things with exactly m=1 ascents. The regular sequence (i.e. for n=i and m=1) has the same complexity:
  (#(0 0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191) 9 (R0 (R1 (C13 S (C13 S P31)) P11) 0) 2330 1258)
[C.f.: http://oeis.org/A000295. See also: http://en.wikipedia.org/wiki/Eulerian_number
The Eulerian number A(n,m) is the number of permutations of n items that have exactly m "ascents" E.g. the value of our function at 2 is 4 because the permutations of 3=(2+1) things with one ascent are (1 3 2), (2 1 3), (2 3 1), and (3 1 2) [ (1 2 3) and (3 2 1) ascend 2 and 0 times, instead]]
We can understand how the first sequence is computed better by understanding the arity two function g that it's constructed from:
  (#(1 2 3 4 5 3 4 5 6 7 5 6 7 8 9 7 8 9 10 11 9 10 11 12 13) 7 (R1 (C13 S (C13 S P31)) S) 1300 0)
Applied to (i,j), g executes the psuedo-code:
  set u=j+1
  i times: set u=u+2
So g(i,j)=2*i+j+1
Then f is built as (R0 g 0) which when applied to i executes the psuedo-code:
  set u=0
  for j from 0..(i-1), set u=g(u,j)=2*u+j+1

39 is computed using the same f used by 15, but applying it to 2.

Here is a summary of the available non-negative integers by complexity
1    (0)
2    (0)
3    (0 1)
4    (0 1)
5    (0 1 2)
6    (0 1 2)
7    (0 1 2 3)
8    (0 1 2 3)
9    (0 1 2 3 4)
10   (0 1 2 3 4)
11   (0 1 2 3 4 5)
12   (0 1 2 3 4 5)
13   (0 1 2 3 4 5 6)
14   (0 1 2 3 4 5 6 7)
15   (0 1 2 3 4 5 6 7)
16   (0 1 2 3 4 5 6 7 8 9 10)
17   (0 1 2 3 4 5 6 7 8 9 10 11 12 15) ; 15 beats 13 and 14
18   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 15 21) ; 15 and 21 beat 14 and 16..20
19   (0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 21 22 23 24 26 27 31 32 39) ; these beat 20 25 28..30 33..38

We derive the following initial part of the ordering of the non-negative integers according to their complexity as primitive recursive expressions
==================================================================================================================================================

(0)         <
(1)         <
(2)         <
(3) 	    <
(4)         <
(5)         <
(6) 	    <
(7) 	    <
(8 9 10)    <
(11 12 15)  < ; so 15 is simpler than 13 and 14
(13 21)     < ; so 21 is simpler than 14 and 16..20
(14 16 17 18 19 22 23 24 26 27 31 32 39) <  ; so 22, 23, 24, 26, 27, 31, 32, and 39 are simpler than 20, 25, 28..30, and 33..38
(20 28 29 48 54 55 66 127 231 1540 4083) < ...

[The last row is based on the following and could be incomplete (we'll know when the level 20 results finish);
 if it's complete, it appears that 4083 is simpler than 25, for example.]

(on-new (#(127) 20 (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 S (C10 S (C10 S 0)))) 2150659 0))
(on-new (#(48) 20 (C10 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0) (C10 S (C10 S (C10 S 0)))) 2150666 0))
(on-new (#(1540) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S S) (C10 S (C10 S 0))) 2151588 0)) ; similar to 21
(on-new (#(231) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) S P11) (C10 S (C10 S 0))) 2151589 0))
(on-new (#(55) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S) P11 S) (C10 S (C10 S 0))) 2151590 0))
(on-new (#(29) 20 (C10 (C21 (R1 (C13 S (C13 (R0 (R1 (C13 S P31) S) 0) P31)) S) S S) (C10 S 0)) 2156820 0))
(on-new (#(66) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) (C13 S P31)) S) S S) (C10 S 0)) 2156841 0))
(on-new (#(28) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) (C13 S P31)) S) S P11) (C10 S 0)) 2156842 0))
(on-new (#(54) 20 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P31) S)) 0) P31) S) S S) (C10 S 0)) 2156849 0))
(on-new (#(20) 20 (C10 (C21 (R1 (C13 (R0 (C12 S (R1 (C13 S P31) S)) 0) P31) S) S P11) (C10 S 0)) 2156850 0))
(on-new (#(4083) 20 (C10 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) S S) (C10 S 0)) 2156858 0))

Where 4083, for example is based on the arity 1 function q with the unknown fast-growing function below applied to 1:
  (#(4 4083 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (C21 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) S S) 484359 -1)
To understand this function, notice that it's using the Eulerian sequence with 1 ascent as used to construct 26, let's call this f:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 33554406) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0) 2329 2504)
Suggestively, we can see that 4083 is the 11th number in this sequence and that 11 is the 3rd number in this sequence.
From f, it constructs the arity 2 function g=(R1 (C13 f P31) S)=(R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S).
Applied to (i,j) we can interpret g as the pseudo-code algorithm: 
	set u=j+1
	i times: set u=f(u)
	return u
  (#(1 2 3 4 5 1 4 11 26 57 1 26 4083 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 13 (R1 (C13 (R0 (R1 (C13 S (C13 S P31)) S) 0) P31) S) 167543 -1)
Finally, q is constructed as (C21 g S S), which represents the function that takes i to g(i+1,i+1). Let's confirm that this constructs 4083 when applied to 1.
  q(1)=g(2,2)=f(f(3))=f(11)=4083. Good. 
So we can compute q(2), which would have complexity only 22, as:
  q(2)=g(3,3)=f(f(f(4)))=f(f(26))=f(134217700)= ... big ... maybe ~ 2^(2^27) ~~ 10^40403554

25 is at complexity 21 (unless it shows up in 20 before it finishes) since it can be computed as (C10 S 24) and 24 has complexity 19.

127 uses:
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) 23232 -1)


The revised search strategy invalidates some of the results below:
==================================================================

The results below are based on a search strategy that used a right associativity rule that conflicted with "unique function" technique I use to prevent an effectively exhaustive search. Additionally, the approach taken was to discard functions that were slow to compute (for the purpose of building further functions). To explore results at this stage of the work use the branch landmark-22-buggy.

The many functions identified on OEIS and otherwise are still valid, and the conjecture about "Marc's big number" might still be about right, though other large ones are probably missed and 4083 at complexity 20 is pretty impressive.

Observation: 7 is the first number that has a representation simpler than its direct representation of (C10 (C11 S (C11 S (C11 S (C11 S (C11 S (C11 S S)))))) 0), which has complexity 15.
Instead, the complexity of 7 is 14. Confer the following results which list the results as (#(<<result of evaluation>>) <<complexity>> <<primitive recursive code>>)

  (#(0) 1 0)
  (#(1) 3 (C10 S 0))
  (#(2) 5 (C10 (C11 S S) 0))
  (#(3) 7 (C10 (C11 S (C11 S S)) 0))
  (#(4) 9 (C10 (C11 S (C11 S (C11 S S))) 0))
  (#(5) 11 (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0))
  (#(6) 13 (C10 (C11 S (C11 S (C11 S (C11 S (C11 S S))))) 0))
  (#(7) 14 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) S) 0))
  (#(8) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) S) 0))
  (#(9) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) S) 0))
  (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  (#(11) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S (C13 S P31)))) S) S S) S) 0))
  (#(12) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) (C11 S S)) 0))
  (#(13) 18 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) (C11 S S)) 0))

Observation: To depth 18, the ordering induced on the non-negative integers by their complexity is monotonic with the ordinary ordering. We see 0..6 appear using their direct representations, then see 7 at 14, then 8,9,10 at 16 10,11,12,13 at 18. So the non-negative integers from 0..13 are all ordered the normal way by primitive-recursive complexity.

Continuing to depth 19 adds the following:
  (#(14) 19 (C10 (C11 (R0 (C12 S (R1 (C13 S P31) S)) 0) (C11 S (C11 S (C11 S S)))) 0)))
  (#(15) 19 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) S S) (C11 S S)) 0))
  (#(16) 19 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) S) S S) (C11 S S)) 0))

But, actually, this list is incomplete. The search is not completely exhaustive because functions that are too slow to evaluate
are not reused in further constructions in the current search algorithm. Consider, for example, the first slow arity 1 function (the only slow function of complexity <=10) is:
  (#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 -1) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0))
We can recognize this as the sequence of Eulerian numbers for exactly m=1 ascents. 
[C.f.: http://oeis.org/A000295 which has an extra 0 at the beginning but is otherwise identical. See also: http://en.wikipedia.org/wiki/Eulerian_number
The Eulerian number A(n,m) is the number of permutations of n items that have exactly m "ascents" E.g. the value of our function at 3 is 4 because the permutations of 1..3 with one ascent are (1 3 2), (2 1 3), (2 3 1), and (3 1 2) [ (1 2 3) and (3 2 1) ascend 2 and 0 times, instead]]
Evaluating this function at 4 gives the value 26 with a construction that is also of complexity 19 so we should add the entry:
  (#(26) 19 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0)))
So depth 19 adds 14,15,16, and 26. 

Depth 20 adds 17:
  (#(17) 20 (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) (C11 S (C11 S S))) 0)))

Depth 21 adds: 18..25, 27, 29, 31, 40. 
  (#(18) 21 (C10 (C11 (C21 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P33)) P11) S S) (C11 S S)) 0))
  (#(19) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) S P11) (C11 S (C11 S S))) 0))
  (#(20) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) P11) S S) (C11 S (C11 S S))) 0))
  (#(21) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P33 P31) P11) S S) (C11 S S)) 0))
  (#(22) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P33 P31) S) S S) (C11 S S)) 0))
  (#(23) 21 (C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) (C10 S 0)))
  (#(24) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P33 P31) P11) S S) (C11 S S)) 0))
  (#(25) 21 (C10 (C11 (C21 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P33 P31) S) S S) (C11 S S)) 0))
  (#(27) 21 (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0))
  (#(29) 21 (C20 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 (C11 S (C11 S S)) 0) 0))
  (#(31) 21 (C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S (C11 S (C11 S S))) 0) 0)))
  (#(40) 21 (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0))

This list is again incomplete because of the Eulerian numbers function. Applying it to 5 yields 57:
  (#(57) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0)))
We're also missing the result of this slow function applied to 4: (the function is 3*2^n-n-2, c.f. http://oeis.org/A079583)
  (#(1 3 8 19 42 89 184 375 758 1525 3060 6131 12274 24561 49136 98287 196590 393197 786412 1572843 3145706 6291433 12582888 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)))
Yielding 42:
  (#(42) 21 (C10 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)) (C10 (C11 S (C11 S (C11 S S))) 0)))

If this is the complete list, then 27,29,31, 40, 42, and 57 are simpler than 28,30,32..39 as well as 41,43..56 and 58..

Interestingly, the non-incremental newborns (and 23) all use C20 at the top-level.
     27 applies f=(R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) to (3,0).
            (f j 0)=3^j. (f j 1) is A008776 Pisot sequences E(2,6), L(2,6), P(2,6), T(2,6). (f j 2)=3^(j+1). Curious. (f j 4) is A003946 (off by one). Huh.
     29 applies (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) to (3,0)
     31 applies f=(R1 (C23 (R1 (C13 S P31) S) P31 P31) S) to (4,0)
            (f j 0)=2^(j+1)-1=2*2^j-1. (f j 1)=3*2^j-1. Conjecture (f j k)=(k+2)*2^j-1. Seems to work.
     40 applies f=(R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) to (3,0)
            (f j 0)=(3^(j+1) - 1)/2. (f j 1)=A060816(j+1). (f j 2) doesn't appear to be in OEIS but still obeys a(n)=3*a(n-1)+1; seems the base case is just set as (k+1).
Hmmm... I can also construct 40 using the slow arity 1 function (documented below as A003462):
  (#(0 1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0))
  So 40=(C10 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0) (C10 (C11 S (C11 S (C11 S S))) 0)), applying it to 4, but that's complexity 22, so it hasn't hurt me in this way.

Depth 22 adds: 28,32,39 (still missing 30,33..38 as well as 41..?)
  (#(28) 22 (C10 (C11 (R0 (R1 (C13 S P31) S) 0) (C11 (C21 (R1 (C13 S P31) S) S S) (C11 S S))) 0))
  (#(32) 22 (C20 (C22 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P22 P22) 0 (C10 (C11 S (C11 S S)) 0)))
  (#(39) 22 (C20 (C22 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) P22 P22) 0 (C10 (C11 S (C11 S S)) 0))))
Actually, from the discussion below (c.f. Marc's big number), depth 22 also adds at least two results which use really slow functions
and so aren't in the present search. I.e. if I change the search to reuse slow functions, I'd expect to see:
   (#(-1) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))) ; the -1 is because it'd still take too long to compute
   (#(-1) 22 (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))) ; which I conjecture is 5*2^127-1=850705917302346158658436518579420528639
I conjecture that these are the first "surprisingly big" primitive recursive numbers. (I've informally checked slow functions of complexity 12 or less and these seem like the only candidates.)


We can predict that at depth 23, we'll definitely see the successors of everything at 21, so 30 and 41 will appear among who knows what else.
  41 and 30 were found as successors already at this point (26 wasn't found in this form because of the way I enforce accociativity of C10 and C11 in the search)
    (on-new #(41) ((C10 S (C20 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 (C11 S (C11 S S)) 0) 0)) 41 23))
    (on-new #(30) ((C10 S (C20 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 (C11 S (C11 S S)) 0) 0)) 30 23))
We'll also find the next Eulerian number (by applying it to 6):
   (#(120) 23 (C10 (R0 (R1 (C13 S (C13 S P31)) S) 0) (C10 (C11 S (C11 S (C11 S (C11 S (C11 S S))))) 0)))
Presumably we're missing additional fancy things from l-slow by this point, like applying:
  (#(0 0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 32285032 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0))
to 5 to get 58:
 (#(58) 23 (C10 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0) (C10 (C11 S (C11 S (C11 S (C11 S S)))) 0)))
Or applying one of the complexity 13 slow functions to 4.... Clearly it's time to run something more systematic to deal with these slow cases.

Nevertheless, let's look ahead a bit:

Claim: 100 has complexity 29 or less.
Proof:
  10 has complexity 16 (or less), viz:
    (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  Squaring has complexity 12 (or less), viz:
    (#(0 1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P22 P21) 0))
  Combining these with C10 has total complexity 16+12+1=29:
    (C10 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P22 P21) 0) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))

Similarly: 1024 has complexity 29 or less:
  10 has complexity 16 (or less), viz:
    (#(10) 16 (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
  j->2^j has complexity 12 (or less), viz:
    (#(1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216) 12 (C11 S (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0)))
  Combining with C10 has complexity 16+12+1=29:
    (C10 (C11 S (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0)) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))

Hmm: 1023 has complexity 27 or less: (simpler?)
   Just use j->2^j-1, which has complexity 10, instead.
     (#(0 1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215) 10 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0))
   (C10 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0) (C10 (C11 (C21 (R1 (C13 S (C13 S P31)) S) S S) (C11 S S)) 0))
I notice that trying the trick used for 31 doesn't actually help; it has complexity 28, since 9 isn't "simpler" than 10. (It would get us 2047 @ 28, though) Viz:
   Apply f=(R1 (C23 (R1 (C13 S P31) S) P31 P31) S) to (9,0)
   1023=(C20 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 (C21 (R1 (C13 S (C13 S (C13 S P31))) S) S S) S) 0) 0)

There are bigger numbers at that complexity.
E.g.: 76457 @ 19+7+1=27
   (evaluation-timeout (R0 (R1 (C13 S (C23 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P33 P31)) S) 0) 19 #(0 1 7 76457 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1))
   76457=(C10 (R0 (R1 (C13 S (C23 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) P33 P31)) S) 0) (C10 (C11 S (C11 S S)) 0))
Or: 72701268 @ 18+7+1=26
   (C10 (R0 (R1 (C13 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) P31) S) 0) (C10 (C11 S (C11 S S)) 0))
From the slow function: (which fortunately wasn't too slow for me to obtain this result; some of the other slows might be bigger)
  (#(0 1 12 72701268 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 18 (R0 (R1 (C13 (C21 (R1 (C13 S (C13 S (C13 S P31))) P11) S S) P31) S) 0))
One of these might exceed it.
  (#(2 4 32 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) (C10 (C11 S S) 0)))
  (#(2 7 383 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S S) 0)))
  (#(1 4 62 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 S (C23 (R1 (C13 S P31) S) P31 P31)) S) (C10 S 0)))
  (#(1 3 29 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) P11) (C10 S 0)))
  (#(1 5 157 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C13 (C21 (R1 (C13 S P31) S) S S) P31) S) (C10 S 0)))
  (#(1 3 54 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S) (C10 S 0)))
  (#(1 4 202 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S) (C10 S 0)))
  (#(1 3 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P32) S) (C10 S 0)))
  (#(1 3 30 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P33) S) (C10 S 0)))
  (#(1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S S)) (C10 S 0)))
  (#(1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) S)) (C10 S 0)))
  (#(0 2 27 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) (C11 S S)) 0))
  (#(0 2 31 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) (C11 S S)) 0))
  (#(0 3 39 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S (C11 S S))) 0))
  (#(0 3 25 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) S))) 0))
  (#(0 3 32 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S P31) S) P31 P31) (C11 S S))) 0))
  (#(0 2 23 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S (C13 S P31)) S) P31 P31) S)) 0))
  (#(0 2 19 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (C12 S (R1 (C23 (R1 (C13 S (C13 S P31)) P11) P31 P31) S)) 0))
E.g. (taking the second, which is "in the lead"):
  (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) (C10 (C11 S S) 0)) (C10 (C11 S (C11 S S)) 0)) == ??? @ 24.
Or this thing that I haven't been able to evaluate at 4 despite days of letting the computer try.
  (#(0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0))
Or, bigger presumably, but still at complexity 12:
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0))
So what number is this?: (evaluating the former at 4 for complexity 12+9+1=22)
  (C10 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))
Let's call it Marc's first big number, eh? :) To find out what it is, I use diagnostic versions of the primitive recursion constructions:
  (C10 (R0-diagnose (R1-diagnose (C23 (R1 (C13 S P31) S) P31 P31) S) 0) (C10 (C11 S (C11 S (C11 S S))) 0))
It seems that to compute f(4) it uses g(n) = 5*2^(n+1)-1, n>0, so I think f(4) is g(126)=5*2^127-1. The neat bit is that I (suspect) the multiplier 5 comes from f(2) and the exponent of 127 comes from f(3). I suppose I should really "read the code" and check but that seems to be the idea. So (speculating) f(5) would be 127*2^(5*2^127-1)-1. Yeesh. No wonder it's slow.
Interesting, so if I change the code to keep slow functions around for growing new results, I'll get some truly giant arity 0 results by depth 22. Neat. (well, they'll prob. timeout. heh)

Let's check some early slows against OEIS:
(#(0 1 4 11 26 57 120 247 502 1013 2036 4083 8178 16369 32752 65519 131054 262125 524268 1048555 2097130 4194281 8388584 16777191 -1) 9 (R0 (R1 (C13 S (C13 S P31)) S) 0))
http://oeis.org/A000295:   Eulerian numbers (Euler's triangle: column k=2 of A008292, column k=1 of A173018)

(#(1 2 5 12 27 58 121 248 503 1014 2037 4084 8179 16370 32753 65520 131055 262126 524269 1048556 2097131 4194282 8388585 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) P11) (C10 S 0)))
http://oeis.org/A000325 has an extra 1 at the beginning: 2^n - n

(#(1 3 8 19 42 89 184 375 758 1525 3060 6131 12274 24561 49136 98287 196590 393197 786412 1572843 3145706 6291433 12582888 -1 -1) 11 (R0 (R1 (C13 S (C13 S P31)) S) (C10 S 0)))
http://oeis.org/A079583: 3*2^n-n-2

(#(0 0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 32285032 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) P11) 0))
(#(0 1 5 18 58 179 543 1636 4916 14757 44281 132854 398574 1195735 3587219 10761672 -1 -1 -1 -1 -1 -1 -1 -1 -1) 11 (R0 (R1 (C13 S (C13 S (C13 S P31))) S) 0))
http://oeis.org/A000340: 1, 5, 18, 58, 179, 543, 1636, 4916, 14757 ... a(0)=1, a(n)=3*a(n-1)+n+1

(#(0 2 7 18 41 88 183 374 757 1524 3059 6130 12273 24560 49135 98286 196589 393196 786411 1572842 3145705 6291432 12582887 -1 -1) 11 (R0 (C12 S (R1 (C13 S (C13 S P31)) S)) 0))
http://oeis.org/A095151 a(n+3) = 3*a(n+2)-2*a(n+1)+1 with a(0)=0, a(1)=2. A sequence generated from a Bell difference row matrix, companion to A095150

(#(1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 -1) 12 (C11 (R0 (C22 (R1 (C13 S P31) S) P21 P21) 0) S))
(#(1 3 7 15 31 63 127 255 511 1023 2047 4095 8191 16383 32767 65535 131071 262143 524287 1048575 2097151 4194303 8388607 16777215 -1) 12 (R0 (C22 (R1 (C13 S P31) S) P21 P21) (C10 S 0)))
http://oeis.org/A000225  2^n - 1. (Sometimes called Mersenne numbers, although that name is usually reserved for A001348.) 

Six for six.

  (#(0 0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) P11) 0))
  (#(0 1 4 48 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P31) S) 0))
Too ambiguous. None of the hits seem big enough in the next entry to be a match.

  (#(0 0 1 2 4 10 50 1231 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P32) P11) 0))
  (#(0 1 2 4 10 50 1231 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P32) S) 0))
Nope. Should I figure out why its important and then contribute it? :)

  (#(0 0 1 4 15 64 325 1956 13699 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) P11) 0))
A007526	    a(n) = n(a(n-1) + 1)

  (#(0 1 3 9 31 129 651 3913 27399 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P31 P33) S) 0))
basically the same as: A111063 a(0) = 1; a(n) = (n-1)*a(n-1)+n.

  (#(0 0 1 0 3 4 6 10 18 34 66 130 258 514 1026 2050 4098 8194 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P32 P32) P11) 0))
  (#(0 1 0 3 4 6 10 18 34 66 130 258 514 1026 2050 4098 8194 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) P11) P32 P32) S) 0))
basically: A052548 2^n+2.

  (#(0 0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) P11) 0))
  (#(0 1 5 127 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P31) S) 0))
Nope.

  (#(0 0 1 3 9 49 1230 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P32) P11) 0)))
  (#(0 1 3 9 49 1230 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P32) S) 0))
Nope.

  (#(0 0 1 5 23 119 719 5039 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) P11) 0))
A033312:  n! - 1. (Hey, I didn't know I got factorial. yay!) (Further evidence that maybe I should interpret the basis of the PR to be 1 and S instead of 0 and S? Ah well.)
(for reference:
(#(1 1 2 6 24 120 720 5040 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 16 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) (R0 P21 0)) (C10 S 0)))
Oh. Right. It didn't find the (C11 S ...) version of it because I don't include slow functions for further building -- maybe I need to change that and keep them anyway.
)

  (#(0 1 4 15 64 325 1956 13699 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (R1 (C23 (R1 (C13 S P31) S) P31 P33) S) 0))
A007526  a(n) = n(a(n-1) + 1)

  (#(0 1 4 13 40 121 364 1093 3280 9841 29524 88573 265720 797161 2391484 7174453 21523360 -1 -1 -1 -1 -1 -1 -1 -1) 12 (R0 (C22 (R1 (C13 S (C13 S P31)) S) P21 P21) 0))
A003462	    (3^n - 1)/2. (lots of stories about it)

  (#(0 3 9 21 45 93 189 381 765 1533 3069 6141 12285 24573 49149 98301 196605 393213 786429 1572861 3145725 6291453 12582909 25165821 -1) 12 (R0 (C12 (C21 (R1 (C13 S P31) S) S S) P21) 0))
basically A068156 G.f.: (x+2)*(x+1)/((x-1)*(x-2)) = Sum(n=0,inf,a(n)*(x/2)^n).

  (#(0 2 6 14 30 62 126 254 510 1022 2046 4094 8190 16382 32766 65534 131070 262142 524286 1048574 2097150 4194302 8388606 16777214 -1) 12 (R0 (C12 S (C22 (R1 (C13 S P31) S) P21 P21)) 0))
A000918	    2^n - 2

... and so on. So 14 for 17. Pretty good. I wonder how I'd do on the converse? Well, I nail A000004 the zero sequence but 1..3 look hard to get. Hmmm. I guess I could check a random sample of OEIS, but not today....

Slowish functions of two arguments at complexity 11. Let's see.
  (#(1 2 3 4 5 1 3 6 10 15 1 6 21 55 120 1 21 231 1540 7260 1 231 26796 -1 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) S))
  (#(0 1 2 3 4 0 1 3 6 10 0 1 6 21 55 0 1 21 231 1540 0 1 231 26796 -1) 11 (R1 (C13 (R0 (R1 (C13 S P31) S) 0) P31) P11))
Hmmm. (f 0 i) is (S i). (f 1 i) is A002817 Doubly triangular numbers: n*(n+1)*(n^2+n+2)/8. (f 2 i) is the triply triangular (A064322) (f 3 i) is indeed A066370 Quadruply triangular numbers.
Seems that we've identified all such sequences with one nice function. Presumably fifth and sixth triangular are readily computed if anyone wants them.


  




